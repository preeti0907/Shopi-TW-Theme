/**
 * Shopify Collection Filters JS
 * Handles collection filtering functionality for your Shopify store
 */

(function() {
    // Define custom elements
    class CollectionFiltersForm extends HTMLElement {
      constructor() {
        super();
        this.debouncedOnSubmit = debounce((event) => {
          this.onSubmitHandler(event);
        }, 500);
        
        this.querySelector('form').addEventListener('input', this.debouncedOnSubmit.bind(this));
        this.setListeners();
      }
  
      setListeners() {
        const filterForm = this.querySelector('form');
        filterForm.addEventListener('submit', this.onSubmitHandler.bind(this));
        
        // Handle clear buttons
        const clearButtons = this.querySelectorAll('.clear-all-filters');
        clearButtons.forEach(button => {
          button.addEventListener('click', this.onClearFilters.bind(this));
        });
        
        // Handle remove filter buttons
        const removeFilterButtons = this.querySelectorAll('[data-remove-filter]');
        removeFilterButtons.forEach(button => {
          button.addEventListener('click', this.onRemoveFilter.bind(this));
        });
        
        // Handle remove price range buttons 
        const removePriceButtons = this.querySelectorAll('[data-remove-price-range]');
        removePriceButtons.forEach(button => {
          button.addEventListener('click', this.onRemovePriceRange.bind(this));
        });
        
        // Toggle filter dropdowns
        const filterToggles = this.querySelectorAll('.filter-button');
        filterToggles.forEach(toggle => {
          toggle.addEventListener('click', this.onToggleFilter.bind(this));
        });
      }
  
      onSubmitHandler(event) {
        event.preventDefault();
        const formData = new FormData(this.querySelector('form'));
        const searchParams = new URLSearchParams(formData).toString();
        this.renderSection(searchParams);
      }
      
      onClearFilters(event) {
        event.preventDefault();
        this.renderSection();
      }
      
      onRemoveFilter(event) {
        event.preventDefault();
        const filterName = event.currentTarget.dataset.filterName;
        const filterValue = event.currentTarget.dataset.filterValue;
        
        // Find and uncheck the corresponding checkbox
        const checkbox = this.querySelector(`input[name="${filterName}"][value="${filterValue}"]`);
        if (checkbox) checkbox.checked = false;
        
        this.renderSection(new URLSearchParams(new FormData(this.querySelector('form'))).toString());
      }
      
      onRemovePriceRange(event) {
        event.preventDefault();
        
        // Clear price range inputs
        const priceInputs = this.querySelectorAll('input[id^="price-"]');
        priceInputs.forEach(input => {
          if (input.type === 'number') {
            input.value = '';
          } else if (input.type === 'range') {
            if (input.id.includes('min')) {
              input.value = 0;
            } else {
              input.value = input.max;
            }
          }
        });
        
        this.renderSection(new URLSearchParams(new FormData(this.querySelector('form'))).toString());
      }
      
      onToggleFilter(event) {
        event.preventDefault();
        const button = event.currentTarget;
        const content = button.nextElementSibling;
        const chevron = button.querySelector('.chevron-down');
        const isExpanded = button.getAttribute('data-expanded') === 'true';
        
        if (isExpanded) {
          content.classList.add('hidden');
          chevron.classList.remove('rotate-180');
          button.setAttribute('data-expanded', 'false');
        } else {
          // Close other open filters first
          this.querySelectorAll('.filter-button[data-expanded="true"]').forEach(openButton => {
            if (openButton !== button) {
              const openContent = openButton.nextElementSibling;
              const openChevron = openButton.querySelector('.chevron-down');
              openContent.classList.add('hidden');
              openChevron.classList.remove('rotate-180');
              openButton.setAttribute('data-expanded', 'false');
            }
          });
          
          content.classList.remove('hidden');
          chevron.classList.add('rotate-180');
          button.setAttribute('data-expanded', 'true');
        }
      }
  
      renderSection(searchParams = '') {
        const url = `${window.location.pathname}?section_id=${this.dataset.sectionId}&${searchParams}`;
        
        // Show loading state
        document.body.classList.add('filters-applying');
        
        fetch(url)
          .then(response => response.text())
          .then((responseText) => {
            const html = new DOMParser().parseFromString(responseText, 'text/html');
            const destination = document.getElementById('CollectionProductGrid');
            const newFilters = html.getElementById('CollectionFiltersForm');
            
            if (destination) destination.innerHTML = html.getElementById('CollectionProductGrid').innerHTML;
            if (newFilters) this.replaceFilters(newFilters);
            
            // Update URL in browser history
            const newUrl = searchParams ? `${window.location.pathname}?${searchParams}` : window.location.pathname;
            window.history.replaceState({ path: newUrl }, '', newUrl);
            
            // Re-initialize product components
            if (typeof initProductComponents === 'function') {
              initProductComponents();
            }
          })
          .catch(e => {
            console.error(e);
          })
          .finally(() => {
            // Hide loading state
            document.body.classList.remove('filters-applying');
            this.setListeners();
          });
      }
      
      replaceFilters(newFilters) {
        const parent = this.parentNode;
        parent.replaceChild(newFilters, this);
        
        // Reset price range sliders
        document.querySelectorAll('price-range').forEach(initPriceRange);
      }
    }
  
    class PriceRange extends HTMLElement {
      constructor() {
        super();
        this.initialized = false;
        this.init();
      }
      
      init() {
        if (this.initialized) return;
        
        this.minSlider = this.querySelector('#price-min');
        this.maxSlider = this.querySelector('#price-max');
        this.minInput = this.querySelector('#price-min-value');
        this.maxInput = this.querySelector('#price-max-value');
        this.progress = this.querySelector('.price-range-progress');
        
        if (!this.minSlider || !this.maxSlider) return;
        
        this.min = parseInt(this.minSlider.min) || 0;
        this.max = parseInt(this.maxSlider.max) || 1000;
        
        this.minSlider.addEventListener('input', this.onMinSliderInput.bind(this));
        this.maxSlider.addEventListener('input', this.onMaxSliderInput.bind(this));
        this.minInput.addEventListener('input', this.onMinInputChange.bind(this));
        this.maxInput.addEventListener('input', this.onMaxInputChange.bind(this));
        
        this.updateProgressBar();
        this.initialized = true;
      }
      
      onMinSliderInput(event) {
        const minValue = parseInt(this.minSlider.value);
        const maxValue = parseInt(this.maxSlider.value);
        
        if (minValue > maxValue) {
          this.minSlider.value = maxValue;
        }
        
        this.minInput.value = this.minSlider.value;
        this.updateProgressBar();
      }
      
      onMaxSliderInput(event) {
        const minValue = parseInt(this.minSlider.value);
        const maxValue = parseInt(this.maxSlider.value);
        
        if (maxValue < minValue) {
          this.maxSlider.value = minValue;
        }
        
        this.maxInput.value = this.maxSlider.value;
        this.updateProgressBar();
      }
      
      onMinInputChange(event) {
        const minValue = parseInt(this.minInput.value);
        
        if (!isNaN(minValue)) {
          this.minSlider.value = Math.min(minValue, parseInt(this.maxSlider.value));
          this.updateProgressBar();
        }
      }
      
      onMaxInputChange(event) {
        const maxValue = parseInt(this.maxInput.value);
        
        if (!isNaN(maxValue)) {
          this.maxSlider.value = Math.max(maxValue, parseInt(this.minSlider.value));
          this.updateProgressBar();
        }
      }
      
      updateProgressBar() {
        if (!this.progress) return;
        
        const minPercent = ((this.minSlider.value - this.min) / (this.max - this.min)) * 100;
        const maxPercent = ((this.maxSlider.value - this.min) / (this.max - this.min)) * 100;
        
        this.progress.style.left = `${minPercent}%`;
        this.progress.style.right = `${100 - maxPercent}%`;
      }
    }
  
    // Helper Functions
    function debounce(fn, wait) {
      let t;
      return (...args) => {
        clearTimeout(t);
        t = setTimeout(() => fn.apply(this, args), wait);
      };
    }
    
    function initPriceRange(priceRange) {
      if (priceRange.initialized) return;
      priceRange.init();
    }
  
    // Register custom elements
    customElements.define('collection-filters-form', CollectionFiltersForm);
    customElements.define('price-range', PriceRange);
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize all price ranges
      document.querySelectorAll('price-range').forEach(initPriceRange);
      
      // Add loading indicator styles
      const styleElement = document.createElement('style');
      styleElement.textContent = `
        .filters-applying .collection-product-grid {
          opacity: 0.6;
          pointer-events: none;
        }
        
        @keyframes filtersSpin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .filters-applying:after {
          content: '';
          position: fixed;
          top: 50%;
          left: 50%;
          width: 24px;
          height: 24px;
          margin-top: -12px;
          margin-left: -12px;
          border-radius: 50%;
          border: 2px solid rgba(0, 0, 0, 0.2);
          border-top-color: rgba(0, 0, 0, 0.8);
          animation: filtersSpin 0.6s linear infinite;
          z-index: 9999;
        }
      `;
      document.head.appendChild(styleElement);
    });
  })();