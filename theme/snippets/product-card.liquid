{% comment %}
  Dynamic Product Card Component
  
  This component renders a product card with customizable features:
  - Secondary image on hover
  - Add to cart button
  - Variant selectors (list, dropdown, or images)
  - Sale badges with percentage or amount saved
  - Pack size and SKU display
  - Star rating (compatible with Judge.me or other apps)
  - Wishlist functionality
  - Customizable title lines
  - Price display with sale/compare pricing
  
  Usage:
  {% render 'product-card',
    product: product,
    show_secondary_image: true,
    show_add_to_cart: true,
    variant_selector: 'dropdown', (options: 'list', 'dropdown', 'images', 'none')
    badge_type: 'percentage', (options: 'percentage', 'amount', 'text', 'none')
    show_pack_size: true,
    show_sku: true,
    show_rating: true,
    show_wishlist: true,
    title_lines: 2,
    lazy_load: true
  %}
{% endcomment %}

<div class="product-card relative group flex flex-col h-full overflow-hidden" data-product-id="{{ product.id }}">
  {% liquid
    assign product_url = product.url

    # Default values if not specified
    assign show_secondary_image = show_secondary_image | default: settings.show_secondary_image | default: false
    assign show_add_to_cart = show_add_to_cart | default: settings.show_add_to_cart | default: true
    assign variant_selector = variant_selector | default: settings.variant_selector | default: 'none'
    assign badge_type = badge_type | default: settings.badge_type | default: 'percentage'
    assign show_pack_size = show_pack_size | default: settings.show_pack_size | default: false
    assign show_sku = show_sku | default: settings.show_sku | default: false
    assign show_rating = show_rating | default: settings.show_rating | default: false
    assign show_wishlist = show_wishlist | default: settings.show_wishlist | default: true
    assign title_lines = title_lines | default: settings.title_lines | default: 2
    assign lazy_load = lazy_load | default: true
    
    # Default image
    assign featured_image = product.featured_image
    
    # Secondary image for hover effect
    assign secondary_image = product.images[1] | default: product.featured_image
    
    # Check if product is on sale
    assign on_sale = false
    if product.compare_at_price > product.price
      assign on_sale = true
    endif
    
    # Set title class based on lines
    assign title_class = 'line-clamp-2'
    if title_lines == 1
      assign title_class = 'line-clamp-1'
    elsif title_lines == 3
      assign title_class = 'line-clamp-3'
    endif
    
    # Get available variant options
    assign option_count = product.options_with_values.size
  %}
  
  <!-- Product Image Container -->
  <div class="relative w-full overflow-hidden rounded-lg bg-gray-100 aspect-square">
    <a href="{{ product_url }}" class="absolute inset-0 z-10" aria-label="{{ product.title | escape }}"></a>
    
    <!-- Primary Image -->
    <img 
      src="{{ featured_image | image_url: width: 500 }}"
      srcset="
        {{ featured_image | image_url: width: 300 }} 300w,
        {{ featured_image | image_url: width: 400 }} 400w,
        {{ featured_image | image_url: width: 500 }} 500w,
        {{ featured_image | image_url: width: 600 }} 600w
      "
      sizes="(min-width: 1200px) 300px, (min-width: 992px) 250px, (min-width: 768px) 225px, 50vw"
      alt="{{ featured_image.alt | default: product.title | escape }}"
      {% if lazy_load %}loading="lazy"{% endif %}
      width="{{ featured_image.width }}"
      height="{{ featured_image.height }}"
      class="absolute inset-0 object-cover w-full h-full transition-opacity duration-500 ease-in-out"
    >
    
    <!-- Secondary Image (if enabled) -->
    {% if show_secondary_image and product.images.size > 1 %}
      <img 
        src="{{ secondary_image | image_url: width: 500 }}"
        srcset="
          {{ secondary_image | image_url: width: 300 }} 300w,
          {{ secondary_image | image_url: width: 400 }} 400w,
          {{ secondary_image | image_url: width: 500 }} 500w,
          {{ secondary_image | image_url: width: 600 }} 600w
        "
        sizes="(min-width: 1200px) 300px, (min-width: 992px) 250px, (min-width: 768px) 225px, 50vw"
        alt="{{ secondary_image.alt | default: product.title | escape }}"
        loading="lazy"
        width="{{ secondary_image.width }}"
        height="{{ secondary_image.height }}"
        class="absolute inset-0 object-cover w-full h-full opacity-0 group-hover:opacity-100 transition-opacity duration-500 ease-in-out"
      >
    {% endif %}
    
    <!-- Wishlist Button -->
    {% if show_wishlist %}
      <button 
        type="button"
        class="wishlist-toggle absolute top-2 right-2 z-20 p-2 text-gray-600 hover:text-red-500 bg-white bg-opacity-80 hover:bg-opacity-100 rounded-full transition-all duration-200 shadow-sm"
        aria-label="Add to wishlist"
        data-product-id="{{ product.id }}"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
        </svg>
      </button>
    {% endif %}
    
    <!-- Sale Badge -->
    {% if on_sale and badge_type != 'none' %}
      <div class="absolute top-2 left-2 z-20 py-1 px-2 bg-red-600 text-white text-xs font-medium rounded">
        {% case badge_type %}
          {% when 'percentage' %}
            {% assign savings_percentage = product.compare_at_price | minus: product.price | times: 100 | divided_by: product.compare_at_price | round %}
            Save {{ savings_percentage }}%
          {% when 'amount' %}
            {% assign savings_amount = product.compare_at_price | minus: product.price %}
            Save {{ savings_amount | money }}
          {% when 'text' %}
            Sale
        {% endcase %}
      </div>
    {% endif %}
    
    <!-- Quick Add to Cart (if enabled) -->
    {% if show_add_to_cart and product.available %}
      <div class="absolute inset-x-0 bottom-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 p-2 z-20">
        <button
          type="button"
          class="quick-add w-full bg-black bg-opacity-80 hover:bg-opacity-100 text-white py-2 px-4 rounded-md text-sm font-medium transition-all duration-200"
          data-product-id="{{ product.id }}"
          data-variant-id="{{ product.selected_or_first_available_variant.id }}"
        >
          Add to Cart
        </button>
      </div>
    {% endif %}
  </div>
  
  <!-- Product Info Container -->
  <div class="pt-3 flex flex-col flex-grow">
    <!-- Variant Selector (if enabled) -->
    {% if variant_selector != 'none' and product.has_only_default_variant == false %}
      <div class="mb-2">
        {% case variant_selector %}
          {% when 'list' %}
            <div class="flex flex-wrap gap-1 mb-2">
              {% for option in product.options_with_values.first.values %}
                <button
                  type="button"
                  class="variant-option px-2 py-1 text-xs border rounded-md hover:border-black {% if forloop.first %}border-black{% else %}border-gray-300{% endif %}"
                  data-option-index="0"
                  data-option-value="{{ option }}"
                >
                  {{ option }}
                </button>
              {% endfor %}
            </div>
          
          {% when 'dropdown' %}
            <select class="variant-select w-full py-1 px-2 border border-gray-300 rounded-md text-sm">
              {% for variant in product.variants %}
                <option value="{{ variant.id }}">
                  {{ variant.title }}{% unless variant.available %} - Sold out{% endunless %}
                </option>
              {% endfor %}
            </select>
          
          {% when 'images' %}
            <div class="flex flex-wrap gap-1 mb-2">
              {% for variant in product.variants %}
                {% if variant.featured_image %}
                  <button
                    type="button"
                    class="variant-image {% if forloop.first %}ring-2 ring-black{% endif %} w-8 h-8 rounded-full overflow-hidden border border-gray-300"
                    data-variant-id="{{ variant.id }}"
                    title="{{ variant.title }}"
                  >
                    <img 
                      src="{{ variant.featured_image | image_url: width: 50 }}"
                      alt="{{ variant.title | escape }}"
                      loading="lazy"
                      class="w-full h-full object-cover"
                      height="50"
                      width="50"
                    >
                  </button>
                {% endif %}
              {% endfor %}
            </div>
        {% endcase %}
      </div>
    {% endif %}
    
    <!-- Product Metadata -->
    <div class="flex flex-col flex-grow">
      {% if show_pack_size and product.metafields.product.pack_size != blank %}
        <div class="text-xs text-gray-500 mb-1">
          {{ product.metafields.product.pack_size }}
        </div>
      {% endif %}
      
      <!-- Vendor name -->
      {% if product.vendor != blank %}
        <div class="text-xs text-gray-500 mb-1">
          {{ product.vendor }}
        </div>
      {% endif %}
      
      <!-- Product Title -->
      <h3 class="mb-1 text-sm md:text-base font-medium {{ title_class }}">
        <a href="{{ product_url }}" class="hover:underline">{{ product.title }}</a>
      </h3>
      
      <!-- Rating (if enabled) -->
      {% comment %} {% if show_rating %}
        <div class="flex items-center mb-1">
          {% if product.metafields.judgeme.average_rating %}
            <!-- Judge.me rating integration -->
            <div class="flex items-center">
              <div class="flex text-yellow-400" aria-hidden="true">
                {% assign rating_decimal = product.metafields.judgeme.average_rating | round: 1 %}
                {% assign rating_whole = rating_decimal | floor %}
                {% for i in (1..5) %}
                  {% if i <= rating_whole %}
                    <svg class="w-4 h-4 fill-current" viewBox="0 0 24 24"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/></svg>
                  {% elsif i == rating_whole | plus: 1 and rating_decimal > rating_whole %}
                    <svg class="w-4 h-4 fill-current" viewBox="0 0 24 24"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27z"/><path fill="gray" d="M12 17.27V2L9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27z"/></svg>
                  {% else %}
                    <svg class="w-4 h-4 fill-current text-gray-300" viewBox="0 0 24 24"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/></svg>
                  {% endif %}
                {% endfor %}
              </div>
              <span class="ml-1 text-xs text-gray-600">({{ product.metafields.judgeme.review_count }})</span>
            </div>
          {% else %}
            <!-- Generic star rating placeholder -->
            <div class="flex items-center">
              <div class="flex text-gray-300" aria-hidden="true">
                {% for i in (1..5) %}
                  <svg class="w-4 h-4 fill-current" viewBox="0 0 24 24"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/></svg>
                {% endfor %}
              </div>
              <span class="ml-1 text-xs text-gray-600">(0)</span>
            </div>
          {% endif %}
        </div>
      {% endif %} {% endcomment %}
      
      <!-- SKU (if enabled) -->
      {% if show_sku and product.selected_or_first_available_variant.sku != blank %}
        <div class="text-xs text-gray-500 mb-1">
          SKU: {{ product.selected_or_first_available_variant.sku }}
        </div>
      {% endif %}
      
      <!-- Price -->
      <div class="mt-auto pt-2">
        <div class="flex items-center">
          {% if on_sale %}
            <span class="text-base md:text-lg font-medium text-red-600">
              {{ product.price | money }}
            </span>
            <span class="ml-2 text-sm text-gray-500 line-through">
              {{ product.compare_at_price | money }}
            </span>
          {% else %}
            <span class="text-base md:text-lg font-medium">
              {{ product.price | money }}
            </span>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class ProductCard {
    constructor(element) {
      this.card = element;
      this.productId = this.card.dataset.productId;
      this.variantSelector = this.card.querySelector('.variant-select');
      this.variantOptions = this.card.querySelectorAll('.variant-option');
      this.variantImages = this.card.querySelectorAll('.variant-image');
      this.quickAddButton = this.card.querySelector('.quick-add');
      this.wishlistButton = this.card.querySelector('.wishlist-toggle');
      
      this.init();
    }
    
    init() {
      // Variant selection
      if (this.variantSelector) {
        this.variantSelector.addEventListener('change', this.handleVariantChange.bind(this));
      }
      
      if (this.variantOptions.length) {
        this.variantOptions.forEach(option => {
          option.addEventListener('click', this.handleOptionClick.bind(this));
        });
      }
      
      if (this.variantImages.length) {
        this.variantImages.forEach(image => {
          image.addEventListener('click', this.handleVariantImageClick.bind(this));
        });
      }
      
      // Quick add to cart
      if (this.quickAddButton) {
        this.quickAddButton.addEventListener('click', this.handleQuickAdd.bind(this));
      }
      
      // Wishlist functionality
      if (this.wishlistButton) {
        this.wishlistButton.addEventListener('click', this.handleWishlistToggle.bind(this));
      }
    }
    
    handleVariantChange(event) {
      const variantId = event.target.value;
      if (this.quickAddButton) {
        this.quickAddButton.dataset.variantId = variantId;
      }
    }
    
    handleOptionClick(event) {
      const option = event.currentTarget;
      const index = option.dataset.optionIndex;
      const value = option.dataset.optionValue;
      
      // Update active states
      this.variantOptions.forEach(opt => {
        if (opt.dataset.optionIndex === index) {
          opt.classList.remove('border-black');
          opt.classList.add('border-gray-300');
        }
      });
      
      option.classList.add('border-black');
      option.classList.remove('border-gray-300');
      
      // Here you would normally update the product variant
      // This is a simplified example, a full implementation would need to match the option to a variant
    }
    
    handleVariantImageClick(event) {
      const variantImageBtn = event.currentTarget;
      const variantId = variantImageBtn.dataset.variantId;
      
      // Update active state
      this.variantImages.forEach(img => {
        img.classList.remove('ring-2', 'ring-black');
      });
      
      variantImageBtn.classList.add('ring-2', 'ring-black');
      
      // Update quick add button variant
      if (this.quickAddButton) {
        this.quickAddButton.dataset.variantId = variantId;
      }
    }
    
    handleQuickAdd(event) {
      event.preventDefault();
      const variantId = this.quickAddButton.dataset.variantId;
      
      // Add loading state
      this.quickAddButton.classList.add('opacity-75');
      this.quickAddButton.textContent = 'Adding...';
      
      // Here you'd make an AJAX call to add to cart
      // Example using fetch:
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: variantId,
          quantity: 1
        })
      })
      .then(response => response.json())
      .then(data => {
        // Handle successful add to cart
        this.quickAddButton.textContent = 'Added!';
        
        // Update cart count and show mini cart if you have one
        if (typeof window.updateCartCount === 'function') {
          window.updateCartCount();
        }
        
        // Reset button after a delay
        setTimeout(() => {
          this.quickAddButton.classList.remove('opacity-75');
          this.quickAddButton.textContent = 'Add to Cart';
        }, 2000);
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        this.quickAddButton.textContent = 'Error';
        
        setTimeout(() => {
          this.quickAddButton.classList.remove('opacity-75');
          this.quickAddButton.textContent = 'Add to Cart';
        }, 2000);
      }); 
    }
    
    handleWishlistToggle(event) {
      event.preventDefault();
      
      // Here you'd implement your wishlist functionality
      // This is a simple toggle for demonstration
      this.wishlistButton.classList.toggle('text-red-500');
      
      // Send to your wishlist system via AJAX
      // Example implementation would depend on your wishlist solution
    }
  }

  // Initialize product cards
  document.addEventListener('DOMContentLoaded', () => {
    const productCards = document.querySelectorAll('.product-card');
    productCards.forEach(card => new ProductCard(card));
  });
</script>