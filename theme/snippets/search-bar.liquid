<!-- Add this CSS to your existing style tag -->
<style>
  /* Search Overlay Styles */
  .search-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    transform: translateY(-100%);
    background-color: white;
    transition: transform 0.3s ease-in-out;
    z-index: 50;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .search-overlay.is-active {
    transform: translateY(0);
  }

  .search-results-container {
    max-height: 400px;
    overflow-y: auto;
  }
</style>

<!-- Replace your current search button with this -->
<div class="relative" data-search-container>
  <button
    type="button"
    class="search-toggle hover:scale-110 transition-transform text-current"
    aria-label="Search"
    aria-expanded="false"
    data-search-toggle
  >
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
  </button>
</div>

<!-- Add this search overlay at the end of your layout, before the closing body tag -->
<div id="search-overlay" class="search-overlay -space-x-4 -mt-4">
  <div class="container mx-auto px-4 py-4">
    <div class="flex items-center justify-between mb-4">
      <p class="text-sm text-gray-500">Search our store</p>
      <button id="close-search" class="p-2 hover:scale-110 transition-transform text-current">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <form action="{{ routes.search_url }}" method="get" role="search" class="relative">
      <input
        id="predictive-search-input"
        type="search"
        name="q"
        value="{{ search.terms }}"
        placeholder="Search products..."
        class="w-full px-4 py-3 text-gray-900 bg-gray-50 border border-gray-200 rounded-md focus:ring-1 focus:ring-gray-300 focus:border-gray-300 placeholder-gray-400"
        aria-label="Search"
        autocomplete="off"
      >
      <button
        type="submit"
        class="absolute inset-y-0 right-0 flex items-center px-4 text-gray-500 hover:text-gray-700"
        aria-label="Submit search"
      >
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
        </svg>
      </button>
    </form>

    <div id="search-results-container" class="search-results-container mt-4 hidden">
      <div id="predictive-search-results">
        <ul id="predictive-search-results-list" class="divide-y divide-gray-100">
          <!-- Results will be populated here -->
        </ul>
      </div>

      <div id="search-loading" class="py-8 text-center hidden">
        <svg
          class="animate-spin h-6 w-6 text-gray-500 mx-auto"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      </div>

      <div id="search-no-results" class="py-8 text-center hidden">
        <p class="text-sm text-gray-500">No products found. Try a different search.</p>
      </div>

      <div id="search-view-all" class="py-4 text-center hidden">
        <a href="#" class="text-sm font-medium text-indigo-600 hover:text-indigo-800">View all results</a>
      </div>
    </div>
  </div>
</div>

<script>
{%- raw -%}
class HeaderNavigation {
  constructor() {
    this.searchToggle = document.querySelector('.search-toggle');
    this.searchOverlay = document.getElementById('search-overlay');
    this.closeSearchBtn = document.getElementById('close-search');
    this.searchInput = document.getElementById('predictive-search-input');
    this.searchResultsContainer = document.getElementById('search-results-container');
    this.searchResultsList = document.getElementById('predictive-search-results-list');
    this.searchLoading = document.getElementById('search-loading');
    this.searchNoResults = document.getElementById('search-no-results');
    this.searchViewAll = document.getElementById('search-view-all');
    this.searchViewAllLink = this.searchViewAll.querySelector('a');
    
    this.init();
  }

  init() {
    this.initSearchOverlay();
    this.initSearchInput();
  }

  initSearchOverlay() {
    if (!this.searchToggle || !this.searchOverlay) return;
    
    this.searchToggle.addEventListener('click', () => {
      this.toggleSearchOverlay(true);
    });
    
    this.closeSearchBtn.addEventListener('click', () => {
      this.toggleSearchOverlay(false);
    });
    
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && this.searchOverlay.classList.contains('is-active')) {
        this.toggleSearchOverlay(false);
      }
    });
  }

  initSearchInput() {
    if (!this.searchInput) return;

    this.searchInput.addEventListener('input', this.debounce((event) => {
      this.handleSearchInput(event);
    }, 500));
  }
  
  toggleSearchOverlay(open) {
    if (open) {
      this.searchOverlay.classList.add('is-active');
      this.searchToggle.setAttribute('aria-expanded', 'true');
      setTimeout(() => {
        this.searchInput.focus();
      }, 300);
    } else {
      this.searchOverlay.classList.remove('is-active');
      this.searchToggle.setAttribute('aria-expanded', 'false');
      this.clearSearch();
    }
  }

  clearSearch() {
    this.searchInput.value = '';
    this.searchResultsContainer.classList.add('hidden');
    this.searchResultsList.innerHTML = '';
    this.searchLoading.classList.add('hidden');
    this.searchNoResults.classList.add('hidden');
    this.searchViewAll.classList.add('hidden');
  }

  async handleSearchInput(event) {
    const query = event.target.value.trim();
    
    if (query.length < 2) {
      this.searchResultsContainer.classList.add('hidden');
      return;
    }
    
    this.searchResultsContainer.classList.remove('hidden');
    this.searchLoading.classList.remove('hidden');
    this.searchResultsList.innerHTML = '';
    this.searchNoResults.classList.add('hidden');
    this.searchViewAll.classList.add('hidden');
    
    try {
      const searchParams = new URLSearchParams({
        q: query,
        'resources[type]': 'product',
        'resources[limit]': 5,
        'resources[options][unavailable_products]': 'hide'
      });
      
      const response = await fetch(`${window.Shopify.routes.root}search/suggest.json?${searchParams.toString()}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      this.renderSearchResults(data, query);
    } catch (error) {
      console.error('Error fetching search results:', error);
      this.searchNoResults.classList.remove('hidden');
    } finally {
      this.searchLoading.classList.add('hidden');
    }
  }

  renderSearchResults(data, query) {
    this.searchResultsList.innerHTML = '';
    
    const products = data.resources?.results?.products || [];
    
    if (products.length > 0) {
      products.forEach(product => {
        const li = document.createElement('li');
        
        // Get image URL or use placeholder
        let imageUrl = 'https://cdn.shopify.com/s/files/1/0533/2089/files/placeholder-images-image_large.png?format=webp&v=1530129081';
        
        
        li.innerHTML = `
          <a href="${product.url}" class="flex items-center py-4 px-1 hover:bg-gray-50 transition-colors">
            <div class="w-16 h-16 flex-shrink-0 bg-gray-100 rounded overflow-hidden">
              <img src="${product.featured_image.url}" alt="${product.title}" class="w-full h-full object-cover" loading="lazy">
            </div>
            <div class="ml-4 flex-1">
              <p class="text-sm text-gray-900 font-medium">${product.title}</p>
            </div>
          </a>
        `;
        
        this.searchResultsList.appendChild(li);
      });
      
      // Set up the "View all" link
      this.searchViewAllLink.href = `${window.Shopify.routes.root}search?q=${encodeURIComponent(query)}&type=product`;
      this.searchViewAll.classList.remove('hidden');
    } else {
      this.searchNoResults.classList.remove('hidden');
    }
  }

  debounce(func, delay) {
    let timeout;
    return function(...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), delay);
    };
  }
}

document.addEventListener('DOMContentLoaded', () => {
  new HeaderNavigation();
});
{%- endraw -%}
</script>
