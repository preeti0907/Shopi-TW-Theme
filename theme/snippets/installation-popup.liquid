<!-- Include the popup scripts and styles -->
{{ 'installation-popup.css' | asset_url | stylesheet_tag }}
<!-- Button to trigger popup -->

<!-- Hidden product name -->
<div data-cart-product-name style="display: none;">
  {{ item.title }}
</div>
<!-- Installation Popup with Tailwind Classes -->
<div id="dc-installation-popup-{{ product_id }}" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 items-center justify-center is-active:flex">
  <div class="bg-white p-5 rounded-lg max-w-[90%] w-[600px] max-h-[90vh] overflow-auto relative">
    <div class="flex justify-between items-start mb-4">
      <div class="flex-1">
        <h2 class="text-xl font-bold">Complete Your Purchase!</h2>
        <div class="mt-1">
          <p class="text-gray-600">Enhance your order with these premium add-ons before proceeding!</p>
        </div>
      </div>
      <button class="bg-transparent border-0 text-2xl cursor-pointer p-0 ml-2 popup-close" data-popup-id="{{ product_id }}" type="button">×</button>
    </div>

    <div class="overflow-auto">
      <div class="flex justify-center gap-2 p-2 flex-wrap">
        <a href="/cart" class="inline-block px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 text-sm">Add to Cart</a>
        <a href="/checkout" class="inline-block px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 text-sm">Proceed to Checkout</a>
      </div>

      <div class="grid gap-5">
        {% for accessory in accessories %}
          <div
            class="grid grid-cols-[120px_1fr_120px] gap-4 p-4 border border-gray-200 rounded-lg shadow-sm"
            data-variant-id="{{ accessory.variants.first.id }}"
            data-unit-price="{{ accessory.price | money_without_currency | remove: ',' }}"
          >
            <div class="product-image">
              {% if accessory.images.size > 0 %}
                {% liquid
                  assign base_img = accessory.images[0].src | file_url
                %}

                <img
                  src="https:{{ base_img |  replace: '/files/files', '/files' }}&width=150"
                  alt="{{ accessory.title }}"
                  class="h-[120px] w-[120px] object-cover rounded"
                >
              {% else %}
                <div class="h-[120px] w-[120px] bg-gray-100 flex items-center justify-center text-gray-500 text-sm rounded">No image</div>
              {% endif %}
            </div>
            <div class="product-info">
              <h3 class="text-base font-medium mb-1">{{ accessory.title }}</h3>
              {% if accessory.metafields.custom.coverage %}
                <p class="text-sm text-gray-600 mb-1">Coverage: {{ accessory.metafields.custom.coverage }}m²</p>
              {% endif %}
              <p class="text-sm font-medium">Price: {{ accessory.price | money }}</p>
            </div>
            <div class="flex flex-col gap-2">
              <div class="flex border border-gray-300 rounded-md h-8">
                <button type="button" class="quantity-control quantity-minus w-8 flex items-center justify-center border-r border-gray-300 bg-gray-100 hover:bg-gray-200">-</button>
                <input type="number" class="quantity-input w-full text-center border-0 focus:outline-none focus:ring-0" value="1" min="1">
                <button type="button" class="quantity-control quantity-plus w-8 flex items-center justify-center border-l border-gray-300 bg-gray-100 hover:bg-gray-200">+</button>
              </div>
              <div class="text-sm font-medium">
                Total price: <span class="product-total">{% assign raw_price = accessory.price | money_without_currency | remove: ',' %}{% assign initial_total = raw_price | times: 1 %}₹{{ initial_total | money_without_currency }}</span>
              </div>
              <button class="add-to-basket mt-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md py-2 px-4 text-sm font-medium">ADD TO BASKET</button>
            </div>
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>

<style>
  /* This small style is needed to handle the active state */
  .is-active\:flex.is-active {
    display: flex;
  }
</style>


<script>
document.addEventListener('DOMContentLoaded', function () {
  // Initialize all product totals
  document.querySelectorAll('[data-variant-id]').forEach(product => {
    updateProductTotal(product);
  });

  // Handle show buttons for each popup
  const showButtons = document.querySelectorAll('[data-action="show-installation"]');
  
  if (showButtons.length) {
    showButtons.forEach((button) => {
      button.addEventListener('click', () => {
        // Get the target popup ID from the button
        const popupId = button.getAttribute('data-popup-target');
        const popup = document.getElementById(`dc-installation-popup-${popupId}`);
        
        if (popup) {
          popup.classList.add('is-active');
        } else {
          console.error(`Popup with ID dc-installation-popup-${popupId} not found`);
        }
      });
    });
  }

  // Close popup buttons
  const closeButtons = document.querySelectorAll('.popup-close');
  
  if (closeButtons.length) {
    closeButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const popupId = button.getAttribute('data-popup-id');
        const popup = document.getElementById(`dc-installation-popup-${popupId}`);
        
        if (popup) {
          popup.classList.remove('is-active');
        }
      });
    });
  }

  // Close on outside click for all popups
  document.querySelectorAll('[id^="dc-installation-popup-"]').forEach(popup => {
    popup.addEventListener('click', (e) => {
      if (e.target === popup) {
        popup.classList.remove('is-active');
      }
    });
  });

  // Quantity controls
  const quantityControls = document.querySelectorAll('.quantity-control');
  if (quantityControls.length) {
    quantityControls.forEach((button) => {
      button.addEventListener('click', () => {
        const wrapper = button.closest('div');
        const input = wrapper.querySelector('.quantity-input');
        let value = parseInt(input.value);

        if (button.classList.contains('quantity-minus')) {
          value = Math.max(1, value - 1);
        } else {
          value = value + 1;
        }

        input.value = value;
        updateProductTotal(button.closest('[data-variant-id]'));
      });
    });
  }

  // Add to cart functionality with page refresh
  const addToBasketButtons = document.querySelectorAll('.add-to-basket');
  if (addToBasketButtons.length) {
    addToBasketButtons.forEach((button) => {
      button.addEventListener('click', async () => {
        const product = button.closest('[data-variant-id]');
        const variantId = product.dataset.variantId;
        const quantity = product.querySelector('.quantity-input').value;

        button.disabled = true;
        button.textContent = 'Adding...';

        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              items: [
                {
                  id: variantId,
                  quantity: parseInt(quantity),
                },
              ],
            }),
          });

          if (!response.ok) throw new Error('Failed to add to cart');

          button.textContent = 'Added!';
          
          // Show success message
          const successMessage = document.createElement('div');
          successMessage.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
          successMessage.textContent = 'Item added to cart successfully!';
          document.body.appendChild(successMessage);
          
          // Refresh the page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 1500);
          
        } catch (error) {
          console.error('Error adding to cart:', error);
          button.disabled = false;
          button.textContent = 'Error - Try Again';
          
          // Show error message
          const errorMessage = document.createElement('div');
          errorMessage.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded shadow-lg z-50';
          errorMessage.textContent = 'Failed to add item to cart. Please try again.';
          document.body.appendChild(errorMessage);
          
          setTimeout(() => {
            errorMessage.remove();
          }, 3000);
        }
      });
    });
  }

  // Handle quantity input changes
  document.querySelectorAll('.quantity-input').forEach(input => {
    input.addEventListener('change', () => {
      updateProductTotal(input.closest('[data-variant-id]'));
    });
  });

  function updateProductTotal(productContainer) {
    const quantity = parseInt(productContainer.querySelector('.quantity-input').value);
    
    // Get the raw price value and ensure it's properly parsed as a number
    let unitPrice = productContainer.dataset.unitPrice;
    
    // Log the raw unit price for debugging
    console.log('Raw unit price:', unitPrice);
    
    // Parse the unit price as a float, ensuring commas are removed
    unitPrice = parseFloat(unitPrice.replace(/,/g, ''));
    
    // Calculate the total
    const total = quantity * unitPrice;
    
    // Format the number with commas for Indian formatting (e.g., 2,624.00)
    const formattedTotal = new Intl.NumberFormat('en-IN', {
      style: 'decimal',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(total);
    
    console.log('Quantity:', quantity);
    console.log('Unit price after parsing:', unitPrice);
    console.log('Total calculated:', total);
    console.log('Formatted total:', formattedTotal);
    
    productContainer.querySelector('.product-total').textContent = `₹${formattedTotal}`;
  }
});
</script>