{%- liquid
  assign padding_top_mobile = section.settings.padding_top | times: 0.75 | round: 0
  assign padding_bottom_mobile = section.settings.padding_bottom | times: 0.75 | round: 0
  assign padding_top_desktop = section.settings.padding_top
  assign padding_bottom_desktop = section.settings.padding_bottom
-%}

{%- liquid
  assign testimonial_layout = section.settings.layout_style
  assign slides_to_display = section.settings.slides_to_show
  assign autoplay = section.settings.autoplay
  assign autoplay_speed = section.settings.autoplay_speed | times: 1000
  
  assign columns_mobile_int = section.settings.columns_mobile | plus: 0
  assign show_mobile_slider = false
  if section.settings.swipe_on_mobile and slides_to_display > columns_mobile_int
    assign show_mobile_slider = true
  endif

  assign show_desktop_slider = false
  if section.settings.enable_desktop_slider and slides_to_display > section.settings.columns_desktop
    assign show_desktop_slider = true
  endif
-%}

<div class="color-{{ section.settings.color_scheme }} isolate gradient">
  <div class="w-full container mx-auto py-{{ padding_top_mobile }} md:py-{{ padding_top_desktop }} {% if section.settings.full_width %} max-w-none{% endif %}">
    <div class="container mx-auto text-center mb-8 md:mb-12">
      {%- if section.settings.title != blank -%}
        <h2 class="text-3xl md:text-4xl font-bold {{ section.settings.heading_size }}">{{ section.settings.title }}</h2>
      {%- endif -%}
      
      {%- if section.settings.description != blank and section.settings.show_description -%}
        <div class="mt-4 max-w-3xl mx-auto">
          {{ section.settings.description }}
        </div>
      {%- endif -%}
    </div>

    <div class="relative">
      <slider-component 
        class="w-full relative{% if section.settings.full_width %} max-w-none{% endif %}"
        id="Slider-{{ section.id }}"
        data-autoplay="{{ autoplay }}"
        data-autoplay-speed="{{ autoplay_speed }}"
      >
        <div class="overflow-hidden">
          <ul
            id="Testimonials-{{ section.id }}"
            class="flex flex-nowrap transition-transform duration-500 ease-in-out"
            role="list"
            aria-label="{{ 'general.slider.name' | t }}"
          >
            {%- for block in section.blocks limit: slides_to_display -%}
              <li
                id="Slide-{{ section.id }}-{{ forloop.index }}"
                class="w-full flex-shrink-0 md:w-1/{{ section.settings.columns_desktop }}"
                {{ block.shopify_attributes }}
              >
                <div class="px-3 md:px-4 py-3">
                  {% case testimonial_layout %}
                    {% when 'image_top' %}
                      {% render 'testimonial-image-top', block: block %}
                    {% when 'image_side' %}
                      {% render 'testimonial-image-side', block: block, position: section.settings.image_position %}
                    {% when 'card' %}
                      {% render 'testimonial-card', block: block %}
                    {% when 'minimal' %}
                      {% render 'testimonial-minimal', block: block %}
                    {% else %}
                      {% render 'testimonial-image-top', block: block %}
                  {% endcase %}
                </div>
              </li>
            {%- endfor -%}
          </ul>
        </div>

        {%- if show_mobile_slider or show_desktop_slider or section.settings.show_navigation -%}
          <div class="flex justify-center items-center mt-8 gap-4">
            <button
              type="button"
              class="flex items-center justify-center w-10 h-10 rounded-full bg-white p-2 shadow-md hover:shadow-lg transition-all duration-300 prev-button"
              name="previous"
              aria-label="{{ 'general.slider.previous_slide' | t }}"
              aria-controls="Testimonials-{{ section.id }}"
            >
              <svg class="w-6 h-6 transform rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            
            {%- if section.settings.show_dots -%}
              <div class="flex items-center gap-2 dots-container">
                <!-- Dots will be dynamically generated by JavaScript -->
              </div>
            {%- endif -%}
            
            <button
              type="button"
              class="flex items-center justify-center w-10 h-10 rounded-full bg-white p-2 shadow-md hover:shadow-lg transition-all duration-300 next-button"
              name="next"
              aria-label="{{ 'general.slider.next_slide' | t }}"
              aria-controls="Testimonials-{{ section.id }}"
            >
              <svg class="w-6 h-6 transform -rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </div>
        {%- endif -%}
      </slider-component>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Testimonials",
  "tag": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "default": "Testimonials",
      "label": "Heading"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "text-2xl",
          "label": "Small"
        },
        {
          "value": "text-3xl",
          "label": "Medium"
        },
        {
          "value": "text-4xl",
          "label": "Large"
        }
      ],
      "default": "text-3xl",
      "label": "Heading size"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "Show description",
      "default": false
    },
    {
      "type": "select",
      "id": "layout_style",
      "options": [
        {
          "value": "image_top",
          "label": "Image at top"
        },
        {
          "value": "image_side",
          "label": "Image on side"
        },
        {
          "value": "card",
          "label": "Card style"
        },
        {
          "value": "minimal",
          "label": "Minimal design"
        }
      ],
      "default": "image_top",
      "label": "Layout style"
    },
    {
      "type": "select",
      "id": "image_position",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left",
      "label": "Image position",
      "info": "Only applied when 'Image on side' layout is selected"
    },
    {
      "type": "range",
      "id": "slides_to_show",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 3,
      "label": "Testimonials to show"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 3,
      "label": "Number of columns on desktop"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "Full width",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_desktop_slider",
      "label": "Enable slider on desktop",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay slideshow",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Change slides every",
      "default": 5
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots navigation",
      "default": true
    },
    {
      "type": "select",
      "id": "color_scheme",
      "options": [
        {
          "value": "accent-1",
          "label": "Accent 1"
        },
        {
          "value": "accent-2",
          "label": "Accent 2"
        },
        {
          "value": "background-1",
          "label": "Background 1"
        },
        {
          "value": "background-2",
          "label": "Background 2"
        },
        {
          "value": "inverse",
          "label": "Inverse"
        }
      ],
      "default": "background-1",
      "label": "Color scheme"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "1",
      "label": "Number of columns on mobile",
      "options": [
        {
          "value": "1",
          "label": "1 column"
        },
        {
          "value": "2",
          "label": "2 columns"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "swipe_on_mobile",
      "default": true,
      "label": "Enable swipe on mobile"
    },
    {
      "type": "header",
      "content": "Section Padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "limit": 12,
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Customer image"
        },
        {
          "type": "text",
          "id": "author",
          "default": "Customer Name",
          "label": "Author"
        },
        {
          "type": "text",
          "id": "author_info",
          "default": "Verified Customer",
          "label": "Author description"
        },
        {
          "type": "range",
          "id": "rating",
          "min": 0,
          "max": 5,
          "step": 0.5,
          "default": 5,
          "label": "Rating (out of 5)"
        },
        {
          "type": "textarea",
          "id": "content",
          "default": "Share what your customers are saying about your products, your company...",
          "label": "Testimonial"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Testimonials",
      "blocks": [
        {
          "type": "testimonial"
        },
        {
          "type": "testimonial"
        },
        {
          "type": "testimonial"
        }
      ]
    }
  ]
}
{% endschema %}

<script>
  class SliderComponent extends HTMLElement {
    constructor() {
      super();
      this.slider = this.querySelector('ul');
      this.sliderItems = this.querySelectorAll('li');
      this.prevButton = this.querySelector('.prev-button');
      this.nextButton = this.querySelector('.next-button');
      this.dotsContainer = this.querySelector('.dots-container');
      
      this.currentIndex = 0;
      this.slideCount = this.sliderItems.length;
      this.slidesToShow = window.innerWidth >= 768 ? 
        Math.min(parseInt("{{ section.settings.columns_desktop }}"), this.slideCount) : 
        Math.min(parseInt("{{ section.settings.columns_mobile }}"), this.slideCount);
      
      this.autoplay = this.dataset.autoplay === 'true';
      this.autoplaySpeed = parseInt(this.dataset.autoplaySpeed) || 5000;
      this.autoplayInterval = null;
      
      this.initSlider();
    }
    
    initSlider() {
      if (this.slideCount <= this.slidesToShow) {
        if (this.prevButton) this.prevButton.classList.add('hidden');
        if (this.nextButton) this.nextButton.classList.add('hidden');
        return;
      }
      
      this.setupInfiniteScroll();
      this.createDots();
      
      if (this.prevButton) {
        this.prevButton.addEventListener('click', () => this.navigate(-1));
      }
      
      if (this.nextButton) {
        this.nextButton.addEventListener('click', () => this.navigate(1));
      }
      
      if (this.autoplay) {
        this.startAutoplay();
        this.addEventListener('mouseenter', () => this.stopAutoplay());
        this.addEventListener('mouseleave', () => this.startAutoplay());
      }
      
      window.addEventListener('resize', this.handleResize.bind(this));
    }
    
    setupInfiniteScroll() {
      // Set the width for each slide based on slidesToShow
      this.sliderItems.forEach(item => {
        if (window.innerWidth >= 768) {
          const percentage = (100 / this.slidesToShow) + '%';
          item.style.width = percentage;
        } else {
          item.style.width = '100%';
        }
      });
    }
    
    createDots() {
      if (!this.dotsContainer) return;
      
      this.dotsContainer.innerHTML = '';
      const numDots = Math.ceil(this.slideCount / this.slidesToShow);
      
      for (let i = 0; i < numDots; i++) {
        const dot = document.createElement('button');
        dot.classList.add('w-3', 'h-3', 'rounded-full', 'transition-colors', 'duration-300');
        
        // Active dot styling
        if (i === 0) {
          dot.classList.add('bg-gray-800');
        } else {
          dot.classList.add('bg-gray-300');
        }
        
        dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
        dot.setAttribute('data-index', i);
        dot.addEventListener('click', () => this.goToSlide(i * this.slidesToShow));
        
        this.dotsContainer.appendChild(dot);
      }
    }
    
    updateDots() {
      if (!this.dotsContainer) return;
      
      const dots = this.dotsContainer.querySelectorAll('button');
      const activeDotIndex = Math.floor(this.currentIndex / this.slidesToShow);
      
      dots.forEach((dot, index) => {
        if (index === activeDotIndex) {
          dot.classList.remove('bg-gray-300');
          dot.classList.add('bg-gray-800');
        } else {
          dot.classList.remove('bg-gray-800');
          dot.classList.add('bg-gray-300');
        }
      });
    }
    
    navigate(direction) {
      this.currentIndex = (this.currentIndex + direction + this.slideCount) % this.slideCount;
      this.goToSlide(this.currentIndex);
    }
    
    goToSlide(index) {
      this.currentIndex = index;
      const translateValue = (-100 * (this.currentIndex / this.slidesToShow)) + '%';
      this.slider.style.transform = `translateX(${translateValue})`;
      this.updateDots();
      
      if (this.autoplay) {
        this.stopAutoplay();
        this.startAutoplay();
      }
    }
    
    startAutoplay() {
      if (!this.autoplay) return;
      
      this.autoplayInterval = setInterval(() => {
        this.navigate(1);
      }, this.autoplaySpeed);
    }
    
    stopAutoplay() {
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }
    
    handleResize() {
      const newSlidesToShow = window.innerWidth >= 768 ? 
        Math.min(parseInt("{{ section.settings.columns_desktop }}"), this.slideCount) : 
        Math.min(parseInt("{{ section.settings.columns_mobile }}"), this.slideCount);
        
      if (newSlidesToShow !== this.slidesToShow) {
        this.slidesToShow = newSlidesToShow;
        this.setupInfiniteScroll();
        this.createDots();
        this.goToSlide(0);
      }
    }
  }
  
  customElements.define('slider-component', SliderComponent);
</script>