{% comment %}
  Basic Product Template
  Features:
  - Responsive product gallery
  - Simple product information
  - Variant selector
  - Add to cart functionality
  - Mobile-friendly with Tailwind CSS
{% endcomment %}

<div
  data-section-id="{{ section.id }}"
  data-section-type="product-template"
  data-product-id="{{ product.id }}"
  class="product-template md:mt-8 mb-5 md:mb-12"
>
  <div class="container mx-auto px-4">
    <div class="flex flex-wrap -mx-4">
      <!-- Product Media -->
      <div class="w-full md:w-1/2 px-4 mb-6 md:mb-0">
        <div class="product-media">
          <!-- Main Product Image -->
          <div class="product-featured-image mb-4">
            <img 
              src="{{ product.featured_image | img_url: 'large' }}" 
              alt="{{ product.title | escape }}"
              class="w-full h-auto object-cover rounded-lg"
              id="featured-image"
              height=""
              width=""
            >
          </div>
          
          <!-- Thumbnail Gallery -->
          {% if product.images.size > 1 %}
            <div class="product-thumbnails flex flex-wrap -mx-1">
              {% for image in product.images %}
                <div class="w-1/4 px-1 mb-2">
                  <button 
                    class="thumbnail-button w-full h-auto border {% if forloop.first %}border-black{% else %}border-gray-200{% endif %} rounded overflow-hidden"
                    data-full-size="{{ image | image_url: 'large' }}"
                    data-alt="{{ image.alt | escape }}"
                  >
                    <img 
                      src="{{ image | image_url: 'small' }}" 
                      alt="{{ image.alt | escape }}"
                      class="w-full h-auto object-cover"
                       height=""
                        width=""
                    >
                  </button>
                </div>
              {% endfor %}
            </div>
          {% endif %}
        </div>
      </div>
      
      <!-- Product Info -->
      <div class="w-full md:w-1/2 px-4">
        <div class="product-details">
          <!-- Title -->
          <h1 class="text-3xl font-medium mb-4">{{ product.title }}</h1>
          
          <!-- Price -->
          <div class="product-price mb-6">
            <span class="text-xl font-medium {% if product.compare_at_price > product.price %}text-red-600{% endif %}">
              {{ product.price | money }}
            </span>
            
            {% if product.compare_at_price > product.price %}
              <span class="ml-2 text-gray-500 line-through">
                {{ product.compare_at_price | money }}
              </span>
            {% endif %}
          </div>
          
          <!-- Short Description -->
          {% if product.description != blank %}
            <div class="product-description mb-6 text-gray-600">
              <p>{{ product.description | strip_html | truncatewords: 30 }}</p>
            </div>
          {% endif %}
          
          <!-- Product Form -->
          {% form 'product', product, class: 'product-form' %}
            <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
            
            <!-- Variant Selector -->
            {% unless product.has_only_default_variant %}
              <div class="variant-selectors mb-6">
                {% for option in product.options_with_values %}
                  <div class="mb-4">
                    <label class="block text-sm font-medium mb-2">{{ option.name }}</label>
                    
                    <div class="flex flex-wrap -mx-1">
                      {% for value in option.values %}
                        <div class="px-1 mb-2">
                          <input 
                            type="radio" 
                            id="option{{ option.position }}-{{ value | escape }}" 
                            name="options[{{ option.name }}]" 
                            value="{{ value | escape }}"
                            {% if option.selected_value == value %}checked{% endif %}
                            class="hidden variant-option"
                            data-option-position="{{ option.position }}"
                            data-value="{{ value | escape }}"
                          >
                          <label 
                            for="option{{ option.position }}-{{ value | escape }}"
                            class="inline-block px-4 py-2 border rounded min-w-[40px] text-center cursor-pointer transition-colors {% if option.selected_value == value %}border-black bg-black text-white{% else %}border-gray-300 hover:border-gray-400{% endif %}"
                          >
                            {{ value }}
                          </label>
                        </div>
                      {% endfor %}
                    </div>
                  </div>
                {% endfor %}
              </div>
            {% endunless %}
            
            <!-- Quantity Selector -->
            <div class="mb-6">
              <label for="Quantity" class="block text-sm font-medium mb-2">Quantity</label>
              <div class="flex">
                <button 
                  type="button"
                  class="quantity-decrease w-10 h-10 border border-gray-300 flex items-center justify-center rounded-l"
                >
                  <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M5 12H19"></path>
                  </svg>
                </button>
                
                <input 
                  type="number" 
                  name="quantity" 
                  id="Quantity" 
                  value="1" 
                  min="1"
                  class="quantity-input w-16 h-10 border-t border-b border-gray-300 text-center"
                >
                
                <button 
                  type="button"
                  class="quantity-increase w-10 h-10 border border-gray-300 flex items-center justify-center rounded-r"
                >
                  <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 5V19"></path>
                    <path d="M5 12H19"></path>
                  </svg>
                </button>
              </div>
            </div>
            
            <!-- Add to Cart Button -->
            <div class="add-to-cart-wrapper">
              <button 
                type="submit" 
                name="add" 
                class="add-to-cart-button w-full bg-black text-white py-3 px-6 rounded-md flex items-center justify-center hover:bg-gray-800 transition"
                {% unless product.available %}disabled{% endunless %}
              >
                <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="9" cy="21" r="1"></circle>
                  <circle cx="20" cy="21" r="1"></circle>
                  <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
                </svg>
                <span>
                  {% if product.available %}
                    Add to Cart
                  {% else %}
                    Sold Out
                  {% endif %}
                </span>
              </button>
            </div>
          {% endform %}
        </div>
      </div>
    </div>
  </div>
</div>
<div>
  jhb
  <br/>
  jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>jhb
  <br/>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const productContainer = document.querySelector('.product-template');
    if (!productContainer) return;
    
    // Thumbnail gallery
    const thumbnailButtons = document.querySelectorAll('.thumbnail-button');
    const featuredImage = document.getElementById('featured-image');
    
    thumbnailButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Update featured image
        if (featuredImage) {
          featuredImage.src = this.dataset.fullSize;
          featuredImage.alt = this.dataset.alt || '';
        }
        
        // Update active state
        thumbnailButtons.forEach(btn => {
          btn.classList.remove('border-black');
          btn.classList.add('border-gray-200');
        });
        
        this.classList.remove('border-gray-200');
        this.classList.add('border-black');
      });
    });
    
    // Quantity selector
    const quantityInput = document.querySelector('.quantity-input');
    const decreaseBtn = document.querySelector('.quantity-decrease');
    const increaseBtn = document.querySelector('.quantity-increase');
    
    if (quantityInput && decreaseBtn && increaseBtn) {
      decreaseBtn.addEventListener('click', function() {
        let value = parseInt(quantityInput.value);
        value = Math.max(1, value - 1);
        quantityInput.value = value;
      });
      
      increaseBtn.addEventListener('click', function() {
        let value = parseInt(quantityInput.value);
        value += 1;
        quantityInput.value = value;
      });
    }
    
    // Variant selection
    const variantOptions = document.querySelectorAll('.variant-option');
    const variantIdInput = document.querySelector('input[name="id"]');
    
    if (variantOptions.length && variantIdInput) {
      // Get the initial variant selection
      let selectedOptions = {};
      variantOptions.forEach(option => {
        if (option.checked) {
          const position = option.dataset.optionPosition;
          const value = option.dataset.value;
          selectedOptions[`option${position}`] = value;
        }
      });
      
      // Add change event to all variant options
      variantOptions.forEach(option => {
        option.addEventListener('change', function() {
          // Update selectedOptions
          const position = this.dataset.optionPosition;
          const value = this.dataset.value;
          
          selectedOptions[`option${position}`] = value;
          
          // Get the product JSON
          const productJson = JSON.parse(document.getElementById(`ProductJson-${productContainer.dataset.productId}`)?.textContent || '{}');
          
          // Find the matching variant
          const matchingVariant = productJson.variants.find(variant => {
            return Object.entries(selectedOptions).every(([key, value]) => {
              return variant[key] === value;
            });
          });
          
          if (matchingVariant) {
            // Update variant ID in the form
            variantIdInput.value = matchingVariant.id;
            
            // Update URL
            if (history.replaceState) {
              const newUrl = new URL(window.location.href);
              newUrl.searchParams.set('variant', matchingVariant.id);
              window.history.replaceState({ path: newUrl.toString() }, '', newUrl.toString());
            }
            
            // Update price if needed
            const priceContainer = productContainer.querySelector('.product-price');
            if (priceContainer) {
              const priceElement = priceContainer.querySelector('span:first-child');
              const compareAtPriceElement = priceContainer.querySelector('span:last-child');
              
              if (priceElement) {
                const formatter = new Intl.NumberFormat('en-US', {
                  style: 'currency',
                  currency: 'USD'
                });
                
                priceElement.textContent = formatter.format(matchingVariant.price / 100);
                
                if (compareAtPriceElement) {
                  if (matchingVariant.compare_at_price && matchingVariant.compare_at_price > matchingVariant.price) {
                    compareAtPriceElement.textContent = formatter.format(matchingVariant.compare_at_price / 100);
                    compareAtPriceElement.style.display = 'inline';
                    priceElement.classList.add('text-red-600');
                  } else {
                    compareAtPriceElement.style.display = 'none';
                    priceElement.classList.remove('text-red-600');
                  }
                }
              }
            }
            
            // Update add to cart button
            const addToCartButton = productContainer.querySelector('.add-to-cart-button');
            if (addToCartButton) {
              const buttonTextElement = addToCartButton.querySelector('span');
              
              if (matchingVariant.available) {
                addToCartButton.disabled = false;
                if (buttonTextElement) {
                  buttonTextElement.textContent = 'Add to Cart';
                }
              } else {
                addToCartButton.disabled = true;
                if (buttonTextElement) {
                  buttonTextElement.textContent = 'Sold Out';
                }
              }
            }
          }
        });
      });
    }
  });
</script>

<script type="application/json" id="ProductJson-{{ product.id }}">
  {{ product | json }}
</script>

{% schema %}
{
  "name": "Basic Product information",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_quantity_selector",
      "label": "Show quantity selector",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_variant_labels",
      "label": "Show variant labels",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show vendor",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Product information",
      "category": "Product"
    }
  ]
}
{% endschema %}