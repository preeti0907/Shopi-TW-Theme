{% comment %}
  Recently Viewed Products Section
  Features:
  - Shows products the customer has recently viewed
  - Uses localStorage to track viewed products
  - Responsive slider layout with Tailwind CSS
  - Can be added to any page through the theme editor
{% endcomment %}

<div
  class="recently-viewed-products py-10 {% if section.settings.background_color == 'gray' %}bg-gray-50{% endif %}"
  data-section-id="{{ section.id }}"
  data-section-type="recently-viewed-products"
>
  <div class="container mx-auto px-4">
    {% if section.settings.title != blank %}
      <h2 class="text-2xl md:text-3xl font-medium mb-6 text-center">{{ section.settings.title }}</h2>
    {% endif %}
    
    <div class="recently-viewed-slider relative">
      <button class="slider-prev absolute left-0 top-1/2 transform -translate-y-1/2 z-10 w-10 h-10 rounded-full bg-white shadow-md flex items-center justify-center">
        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <div class="slider-container overflow-hidden">
        <div class="slider-track flex transition-transform duration-300" data-position="0">
          <div class="slider-placeholder flex items-center justify-center p-8 text-gray-400">
            Browse more products to see your recently viewed items here
          </div>
        </div>
      </div>
      
      <button class="slider-next absolute right-0 top-1/2 transform -translate-y-1/2 z-10 w-10 h-10 rounded-full bg-white shadow-md flex items-center justify-center">
        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.querySelector('.recently-viewed-products');
    if (!container) return;
    
    const currentProductId = document.querySelector('.product-template')?.dataset.productId;
    let recentlyViewed = JSON.parse(localStorage.getItem('recentlyViewed') || '[]');
    
    // Add current product to recently viewed if on a product page and not already there
    if (currentProductId && !recentlyViewed.includes(currentProductId)) {
      recentlyViewed.unshift(currentProductId);
      // Keep only the last 10 items
      recentlyViewed = recentlyViewed.slice(0, 10);
      localStorage.setItem('recentlyViewed', JSON.stringify(recentlyViewed));
    }
    
    // Show recently viewed products
    const sliderTrack = container.querySelector('.slider-track');
    const placeholderElement = container.querySelector('.slider-placeholder');
    
    // If we have viewed products (excluding current one if on product page)
    const filteredProducts = currentProductId 
      ? recentlyViewed.filter(id => id !== currentProductId)
      : recentlyViewed;
    
    if (filteredProducts.length > 0) {
      if (sliderTrack && placeholderElement) {
        // Remove placeholder
        placeholderElement.remove();
        
        // Load products
        const maxProducts = {{ section.settings.max_products }};
        const productsToFetch = filteredProducts.slice(0, maxProducts);
        
        // Create a promise for each product fetch
        const productPromises = productsToFetch.map(productId => {
          return fetch(`/products/${productId}?view=card`)
            .then(response => response.text())
            .then(html => {
              const slideItem = document.createElement('div');
              slideItem.className = 'slider-item min-w-[250px] px-2';
              slideItem.innerHTML = html;
              return slideItem;
            })
            .catch(error => {
              console.error(`Error loading product ${productId}:`, error);
              return null;
            });
        });
        
        // Wait for all products to load and add them to the slider
        Promise.all(productPromises)
          .then(slideItems => {
            // Filter out nulls (failed fetches)
            const validSlideItems = slideItems.filter(item => item !== null);
            
            if (validSlideItems.length > 0) {
              validSlideItems.forEach(item => {
                sliderTrack.appendChild(item);
              });
              
              initializeSlider();
            } else {
              // If all fetches failed, show placeholder
              sliderTrack.appendChild(placeholderElement);
            }
          });
      }
    }
    
    // Slider functionality
    function initializeSlider() {
      const sliderTrack = container.querySelector('.slider-track');
      const prevButton = container.querySelector('.slider-prev');
      const nextButton = container.querySelector('.slider-next');
      
      if (!sliderTrack || !prevButton || !nextButton) return;
      
      let position = 0;
      const slideCount = sliderTrack.children.length;
      const slideWidth = 250; // Match min-w-[250px]
      const visibleSlides = Math.floor(sliderTrack.parentElement.offsetWidth / slideWidth);
      const maxPosition = Math.max(0, slideCount - visibleSlides);
      
      function updateSliderPosition() {
        sliderTrack.style.transform = `translateX(-${position * slideWidth}px)`;
        
        // Update button states
        prevButton.disabled = position <= 0;
        nextButton.disabled = position >= maxPosition;
        
        prevButton.style.opacity = prevButton.disabled ? '0.5' : '1';
        nextButton.style.opacity = nextButton.disabled ? '0.5' : '1';
      }
      
      prevButton.addEventListener('click', function() {
        position = Math.max(0, position - 1);
        updateSliderPosition();
      });
      
      nextButton.addEventListener('click', function() {
        position = Math.min(maxPosition, position + 1);
        updateSliderPosition();
      });
      
      // Initial position
      updateSliderPosition();
      
      // Update on window resize
      window.addEventListener('resize', function() {
        const newVisibleSlides = Math.floor(sliderTrack.parentElement.offsetWidth / slideWidth);
        const newMaxPosition = Math.max(0, slideCount - newVisibleSlides);
        
        position = Math.min(position, newMaxPosition);
        updateSliderPosition();
      });
    }
  });
</script>

{% schema %}
{
  "name": "Recently Viewed",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Recently Viewed"
    },
    {
      "type": "range",
      "id": "max_products",
      "min": 3,
      "max": 12,
      "step": 1,
      "default": 6,
      "label": "Maximum products to show"
    },
    {
      "type": "select",
      "id": "background_color",
      "options": [
        {
          "value": "white",
          "label": "White"
        },
        {
          "value": "gray",
          "label": "Light gray"
        }
      ],
      "default": "gray",
      "label": "Background color"
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed",
      "category": "Product"
    }
  ]
}
{% endschema %}