{% comment %}
  Simple Collection Page with top filters
  - Product grid
  - Top filters (Sort, Category, Color, Sizes)
  - Active filters display
{% endcomment %}

<div class="collection-container container mx-auto px-4 py-6">
  <!-- Collection title -->
  <div class="collection-header mb-6">
    <h1 class="text-2xl md:text-3xl font-medium">{{ collection.title }}</h1>
    {% if collection.description != blank %}
      <div class="collection-description mt-2 text-gray-600">
        {{ collection.description }}
      </div>
    {% endif %}
  </div>

  <!-- Top filters bar -->
  <div class="filters-top-row border-t border-b border-gray-200 py-4 mb-6">
    <div class="filters-wrapper flex flex-wrap items-center justify-between gap-2">
      <!-- Filter dropdowns -->
      <div class="filters-left flex flex-wrap items-center gap-3">
        <!-- Sort dropdown -->
        <div class="filter-item relative" data-filter="sort">
          <button
            type="button"
            class="filter-button flex items-center gap-1.5 border border-gray-300 rounded-md px-3 py-1.5 text-sm hover:border-gray-400 focus:outline-none"
          >
            <span>Sort</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="12"
              height="12"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              class="chevron-down"
            >
              <path d="m6 9 6 6 6-6"/>
            </svg>
          </button>
          <div class="filter-dropdown absolute left-0 top-full mt-1 bg-white border border-gray-200 rounded shadow-lg z-10 w-48 hidden">
            <div class="p-2">
              <a
                href="{{ collection.url }}?sort_by=manual"
                class="block px-3 py-2 hover:bg-gray-100 rounded text-sm {% if collection.sort_by == 'manual' %}font-medium text-blue-600{% endif %}"
              >
                Featured
              </a>
              <a
                href="{{ collection.url }}?sort_by=price-ascending"
                class="block px-3 py-2 hover:bg-gray-100 rounded text-sm {% if collection.sort_by == 'price-ascending' %}font-medium text-blue-600{% endif %}"
              >
                Price: Low to High
              </a>
              <a
                href="{{ collection.url }}?sort_by=price-descending"
                class="block px-3 py-2 hover:bg-gray-100 rounded text-sm {% if collection.sort_by == 'price-descending' %}font-medium text-blue-600{% endif %}"
              >
                Price: High to Low
              </a>
              <a
                href="{{ collection.url }}?sort_by=title-ascending"
                class="block px-3 py-2 hover:bg-gray-100 rounded text-sm {% if collection.sort_by == 'title-ascending' %}font-medium text-blue-600{% endif %}"
              >
                Alphabetically: A-Z
              </a>
              <a
                href="{{ collection.url }}?sort_by=title-descending"
                class="block px-3 py-2 hover:bg-gray-100 rounded text-sm {% if collection.sort_by == 'title-descending' %}font-medium text-blue-600{% endif %}"
              >
                Alphabetically: Z-A
              </a>
              <a
                href="{{ collection.url }}?sort_by=created-descending"
                class="block px-3 py-2 hover:bg-gray-100 rounded text-sm {% if collection.sort_by == 'created-descending' %}font-medium text-blue-600{% endif %}"
              >
                Date: Newest to Oldest
              </a>
              <a
                href="{{ collection.url }}?sort_by=created-ascending"
                class="block px-3 py-2 hover:bg-gray-100 rounded text-sm {% if collection.sort_by == 'created-ascending' %}font-medium text-blue-600{% endif %}"
              >
                Date: Oldest to Newest
              </a>
              <a
                href="{{ collection.url }}?sort_by=best-selling"
                class="block px-3 py-2 hover:bg-gray-100 rounded text-sm {% if collection.sort_by == 'best-selling' %}font-medium text-blue-600{% endif %}"
              >
                Best Selling
              </a>
            </div>
            <div class="p-2 border-t">
              <button
                type="button"
                class="apply-filters w-full bg-blue-600 text-white rounded-md py-2 text-sm hover:bg-blue-700 transition-colors"
              >
                Apply Filters
              </button>
            </div>
          </div>
        </div>

        <!-- Category dropdown -->
        <div class="filter-item relative" data-filter="category">
          <button
            type="button"
            class="filter-button flex items-center gap-1.5 border border-gray-300 rounded-md px-3 py-1.5 text-sm hover:border-gray-400 focus:outline-none"
          >
            <span>Category</span>
            {% if current_tags.size > 0 %}
              <span class="inline-flex items-center justify-center w-5 h-5 text-xs bg-gray-100 rounded-full">
                {{- current_tags.size -}}
              </span>
            {% endif %}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="12"
              height="12"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              class="chevron-down"
            >
              <path d="m6 9 6 6 6-6"/>
            </svg>
          </button>
          <div class="filter-dropdown absolute left-0 top-full mt-1 bg-white border border-gray-200 rounded shadow-lg z-10 w-48 hidden">
            <div class="p-2 max-h-60 overflow-y-auto">
              {% assign product_types = collection.all_products | map: 'type' | uniq %}
              {% for product_type in product_types %}
                <label class="flex items-center px-3 py-2 hover:bg-gray-100 rounded text-sm cursor-pointer {% if current_tags contains product_type %}font-medium{% endif %}">
                  <input
                    type="checkbox"
                    class="mr-2 h-4 w-4 category-filter-checkbox"
                    value="{{ product_type | handle }}"
                    {% if current_tags contains product_type %}
                      checked
                    {% endif %}
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span>{{ product_type }}</span>
                </label>
              {% endfor %}
            </div>
            <div class="p-2 border-t">
              <button
                type="button"
                class="apply-filters w-full bg-blue-600 text-white rounded-md py-2 text-sm hover:bg-blue-700 transition-colors"
              >
                Apply Filters
              </button>
            </div>
          </div>
        </div>

        <!-- Color dropdown -->
        <div class="filter-item relative" data-filter="color">
          <button
            type="button"
            class="filter-button flex items-center gap-1.5 border border-gray-300 rounded-md px-3 py-1.5 text-sm hover:border-gray-400 focus:outline-none"
          >
            <span>Color</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="12"
              height="12"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              class="chevron-down"
            >
              <path d="m6 9 6 6 6-6"/>
            </svg>
          </button>
          <div class="filter-dropdown absolute left-0 top-full mt-1 bg-white border border-gray-200 rounded shadow-lg z-10 w-48 hidden">
            <div class="p-3">
              <div class="grid gap-3">
                <label class="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    class="color-filter-checkbox sr-only"
                    value="white"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span class="color-swatch bg-white border border-gray-300 w-5 h-5 rounded-sm inline-block"></span>
                  <span class="text-sm">White</span>
                </label>

                <label class="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    class="color-filter-checkbox sr-only"
                    value="beige"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span class="color-swatch bg-[#F5F5DC] border border-gray-300 w-5 h-5 rounded-sm inline-block"></span>
                  <span class="text-sm">Beige</span>
                </label>

                <label class="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    class="color-filter-checkbox sr-only"
                    value="blue"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span class="color-swatch bg-blue-500 border border-gray-300 w-5 h-5 rounded-sm inline-block"></span>
                  <span class="text-sm">Blue</span>
                </label>

                <label class="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    class="color-filter-checkbox sr-only"
                    value="black"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span class="color-swatch bg-black border border-gray-300 w-5 h-5 rounded-sm inline-block"></span>
                  <span class="text-sm">Black</span>
                </label>

                <label class="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    class="color-filter-checkbox sr-only"
                    value="red"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span class="color-swatch bg-red-600 border border-gray-300 w-5 h-5 rounded-sm inline-block"></span>
                  <span class="text-sm">Red</span>
                </label>

                <label class="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    class="color-filter-checkbox sr-only"
                    value="green"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span class="color-swatch bg-green-600 border border-gray-300 w-5 h-5 rounded-sm inline-block"></span>
                  <span class="text-sm">Green</span>
                </label>
              </div>
            </div>
            <div class="p-2 border-t">
              <button
                type="button"
                class="apply-filters w-full bg-blue-600 text-white rounded-md py-2 text-sm hover:bg-blue-700 transition-colors"
              >
                Apply Filters
              </button>
            </div>
          </div>
        </div>

        <!-- Sizes dropdown -->
        <div class="filter-item relative" data-filter="sizes">
          <button
            type="button"
            class="filter-button flex items-center gap-1.5 border border-gray-300 rounded-md px-3 py-1.5 text-sm hover:border-gray-400 focus:outline-none"
          >
            <span>Sizes</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="12"
              height="12"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              class="chevron-down"
            >
              <path d="m6 9 6 6 6-6"/>
            </svg>
          </button>
          <div class="filter-dropdown absolute left-0 top-full mt-1 bg-white border border-gray-200 rounded shadow-lg z-10 w-64 hidden">
            <div class="p-2">
              {% for size_option in shop.metafields.product_filter.sizes.value %}
                <label class="flex items-center px-3 py-2 hover:bg-gray-100 rounded text-sm cursor-pointer">
                  <input
                    type="checkbox"
                    class="mr-2 h-4 w-4 size-filter-checkbox"
                    value="{{ size_option | handle }}"
                    {% if current_tags contains size_option %}
                      checked
                    {% endif %}
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span>{{ size_option }}</span>
                </label>
              {% else %}
                <!-- Fallback for demo size filters -->
                <label class="flex items-center px-3 py-2 hover:bg-gray-100 rounded text-sm cursor-pointer">
                  <input
                    type="checkbox"
                    class="mr-2 h-4 w-4 size-filter-checkbox"
                    value="s"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span>S</span>
                </label>
                <label class="flex items-center px-3 py-2 hover:bg-gray-100 rounded text-sm cursor-pointer">
                  <input
                    type="checkbox"
                    class="mr-2 h-4 w-4 size-filter-checkbox"
                    value="m"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span>M</span>
                </label>
                <label class="flex items-center px-3 py-2 hover:bg-gray-100 rounded text-sm cursor-pointer">
                  <input
                    type="checkbox"
                    class="mr-2 h-4 w-4 size-filter-checkbox"
                    value="l"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span>L</span>
                </label>
                <label class="flex items-center px-3 py-2 hover:bg-gray-100 rounded text-sm cursor-pointer">
                  <input
                    type="checkbox"
                    class="mr-2 h-4 w-4 size-filter-checkbox"
                    value="xl"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span>XL</span>
                </label>
                <label class="flex items-center px-3 py-2 hover:bg-gray-100 rounded text-sm cursor-pointer">
                  <input
                    type="checkbox"
                    class="mr-2 h-4 w-4 size-filter-checkbox"
                    value="xxl"
                    data-url=""
                    {#
                    Populated
                    by
                    JS
                    #}
                  >
                  <span>XXL</span>
                </label>
              {% endfor %}
            </div>
            <div class="p-2 border-t">
              <button
                type="button"
                class="apply-filters w-full bg-blue-600 text-white rounded-md py-2 text-sm hover:bg-blue-700 transition-colors"
              >
                Apply Filters
              </button>
            </div>
          </div>
        </div>

        <!-- Price Range Filter -->
        <div class="filter-item relative" data-filter="price">
          <button
            type="button"
            class="filter-button flex items-center gap-1.5 border border-gray-300 rounded-md px-3 py-1.5 text-sm hover:border-gray-400 focus:outline-none"
          >
            <span>Price</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="12"
              height="12"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              class="chevron-down"
            >
              <path d="m6 9 6 6 6-6"/>
            </svg>
          </button>
          <div class="filter-dropdown absolute left-0 top-full mt-1 bg-white border border-gray-200 rounded shadow-lg z-10 w-64 hidden">
            <div class="p-4 space-y-3">
              <div class="flex items-center gap-2">
                <span class="text-sm">{{ cart.currency.symbol }}</span>
                <input
                  type="number"
                  id="filter-price-min"
                  placeholder="Min"
                  min="0"
                  class="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-2 py-1.5"
                >
              </div>
              <div class="flex items-center gap-2">
                <span class="text-sm">{{ cart.currency.symbol }}</span>
                <input
                  type="number"
                  id="filter-price-max"
                  placeholder="Max"
                  min="0"
                  class="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-2 py-1.5"
                >
              </div>
            </div>
            <div class="p-2 border-t">
              <button
                type="button"
                class="apply-filters w-full bg-blue-600 text-white rounded-md py-2 text-sm hover:bg-blue-700 transition-colors"
              >
                Apply Filters
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Products count -->
      <div class="filters-right text-sm text-gray-500">{{ collection.products_count }} products</div>
    </div>
  </div>

  <!-- Active filters -->
  <div class="active-filters mb-6 {% if current_tags.size == 0 %}hidden{% endif %}">
    <div class="flex flex-wrap gap-2 items-center">
      <div class="filters-label flex items-center gap-2 border border-gray-300 rounded-md px-3 py-1.5 text-sm bg-gray-50">
        <span>Filters</span>
        <span class="inline-flex items-center justify-center w-5 h-5 text-xs bg-gray-200 rounded-full">
          {{- current_tags.size -}}
        </span>
      </div>

      <!-- Loop through active filters -->
      {% for tag in current_tags %}
        <a
          href="{{ collection.url }}/{% for t in current_tags %}{% if t != tag %}{{ t | handle }}+{% endif %}{% endfor %}"
          class="active-filter-tag flex items-center bg-gray-100 hover:bg-gray-200 rounded-md px-3 py-1.5 text-sm border border-gray-200"
        >
          <span>{{ tag }}</span>
          <span class="ml-1.5">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="14"
              height="14"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M18 6 6 18"/><path d="m6 6 12 12"/>
            </svg>
          </span>
        </a>
      {% endfor %}

      <!-- Clear all filters -->
      <a href="{{ collection.url }}" class="clear-filters text-sm text-gray-600 hover:text-gray-900 ml-2">Clear all</a>
    </div>
  </div>

  <!-- Product grid -->
  <div class="product-grid">
    {% paginate collection.products by 20 %}
      {% if collection.products.size > 0 %}
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {% for product in collection.products %}
            <div class="product-card">
              <a href="{{ product.url }}" class="block">
                <div class="product-image relative pb-[125%] mb-2 bg-gray-100 overflow-hidden">
                  {% if product.featured_image %}
                    <img
                      src="{{ product.featured_image | img_url: '500x' }}"
                      alt="{{ product.featured_image.alt | escape }}"
                      class="absolute inset-0 w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                      width="{{ product.featured_image.width }}"
                      height="{{ product.featured_image.height }}"
                    >
                  {% else %}
                    {{ 'product-1' | placeholder_svg_tag: 'absolute inset-0 w-full h-full object-cover' }}
                  {% endif %}

                  <!-- Product badges (sale, sold out, etc.) -->
                  {% if product.available == false %}
                    <div class="absolute top-2 right-2 bg-gray-800 text-white text-xs px-2 py-1 rounded">Sold out</div>
                  {% elsif product.compare_at_price > product.price %}
                    <div class="absolute top-2 right-2 bg-red-500 text-white text-xs px-2 py-1 rounded">Sale</div>
                  {% endif %}
                </div>

                <div class="product-info">
                  <h3 class="product-title text-sm font-medium mb-1 line-clamp-2">
                    {{ product.title }}
                  </h3>
                  <div class="product-price flex items-center gap-2">
                    <span class="text-sm {% if product.compare_at_price > product.price %}text-red-600{% endif %}">
                      {{ product.price | money }}
                    </span>
                    {% if product.compare_at_price > product.price %}
                      <span class="text-xs text-gray-500 line-through">
                        {{ product.compare_at_price | money }}
                      </span>
                    {% endif %}
                  </div>
                </div>
              </a>
            </div>
          {% endfor %}
        </div>
      {% else %}
        <div class="empty-collection text-center py-12">
          <p class="text-lg mb-4">No products found in this collection.</p>
          <a href="/collections" class="inline-block px-6 py-3 bg-gray-100 hover:bg-gray-200 rounded-md transition">
            Browse all collections
          </a>
        </div>
      {% endif %}
    {% endpaginate %}
  </div>
</div>


{% schema %}
{
  "name": "Collection Page",
  "settings": [
    {
      "type": "header",
      "content": "Product Grid Settings"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show product vendor",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "label": "Show secondary image on hover",
      "default": true
    }
  ]
}
{% endschema %}

<script>
  // Make collection information available to JavaScript
  window.collection_handle = "{{ collection.handle }}";
  window.collection_url = "{{ collection.url }}";
  window.current_tags = {{ current_tags | json }};
</script>

<style>
  /* Collection Filters Styles */
  .filters-top-row {
    border-color: #eeeeee;
  }

  /* Filter buttons */
  .filter-button {
    position: relative;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 150ms ease;
  }

  .filter-button:hover {
    background-color: #f9fafb;
  }

  /* Filter dropdowns */
  .filter-dropdown {
    min-width: 12rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    border-radius: 0.375rem;
    max-height: 20rem;
    overflow-y: auto;
  }

  /* Rotate chevron animation */
  .rotate-180 {
    transform: rotate(180deg);
  }

  .chevron-down {
    transition: transform 150ms ease;
  }

  /* Color swatches */
  .color-swatch {
    position: relative;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  /* Checked state for color swatches */
  .color-filter-checkbox:checked + .color-swatch::after {
    content: '';
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.2);
  }

  /* Black color needs white checkmark */
  .color-filter-checkbox:checked + .color-swatch.bg-black::after {
    background-color: white;
  }

  /* White color needs dark checkmark */
  .color-filter-checkbox:checked + .color-swatch.bg-white::after {
    background-color: #333;
  }

  /* Active filters */
  .active-filter-tag {
    background-color: #f3f4f6;
    transition: all 150ms ease;
  }

  .active-filter-tag:hover {
    background-color: #e5e7eb;
  }

  /* Line clamp for product titles */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const allTagFilterCheckboxSelector = '.category-filter-checkbox, .color-filter-checkbox, .size-filter-checkbox';
    const allActiveTagFilterCheckboxSelector =
      '.category-filter-checkbox:checked, .color-filter-checkbox:checked, .size-filter-checkbox:checked';

    // Toggle filter dropdowns
    const filterButtons = document.querySelectorAll('.filter-button');
    filterButtons.forEach((button) => {
      button.addEventListener('click', function (e) {
        e.stopPropagation();
        const filterItem = this.closest('.filter-item');
        const dropdown = filterItem.querySelector('.filter-dropdown');
        const chevron = this.querySelector('.chevron-down');

        document.querySelectorAll('.filter-dropdown').forEach((otherDropdown) => {
          if (otherDropdown !== dropdown && !otherDropdown.classList.contains('hidden')) {
            otherDropdown.classList.add('hidden');
            const otherChevron = otherDropdown.closest('.filter-item')?.querySelector('.chevron-down');
            if (otherChevron) {
              otherChevron.classList.remove('rotate-180');
            }
          }
        });
        dropdown.classList.toggle('hidden');
        if (chevron) {
          chevron.classList.toggle('rotate-180');
        }
      });
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', function (e) {
      if (!e.target.closest('.filter-item')) {
        document.querySelectorAll('.filter-dropdown').forEach((dropdown) => {
          dropdown.classList.add('hidden');
          const chevron = dropdown.closest('.filter-item')?.querySelector('.chevron-down');
          if (chevron) {
            chevron.classList.remove('rotate-180');
          }
        });
      }
    });

    // Handle Apply Filter buttons
    const applyFilterButtons = document.querySelectorAll('.apply-filters');
    applyFilterButtons.forEach((button) => {
      button.addEventListener('click', function () {
        // 1. Handle Tag-based filters (category, color, size) for URL path
        const allCheckedTagCheckboxes = document.querySelectorAll(allActiveTagFilterCheckboxSelector);
        let activeTagFilterValues = [];
        allCheckedTagCheckboxes.forEach((cb) => {
          activeTagFilterValues.push(cb.value);
        });
        activeTagFilterValues = [...new Set(activeTagFilterValues)]; // Deduplicate

        let newUrl = window.collection_url;
        if (activeTagFilterValues.length > 0) {
          newUrl += '/' + activeTagFilterValues.join('+');
        }

        // 2. Handle Price Range filter and other URL parameters
        const searchParams = new URLSearchParams(window.location.search); // Start with existing params like sort_by

        // Clear any existing price filter params to avoid conflicts if user clears them
        searchParams.delete('filter.v.price.gte');
        searchParams.delete('filter.v.price.lte');

        const minPriceInput = document.getElementById('filter-price-min');
        const maxPriceInput = document.getElementById('filter-price-max');
        const minPrice = minPriceInput ? parseFloat(minPriceInput.value) : null;
        const maxPrice = maxPriceInput ? parseFloat(maxPriceInput.value) : null;

        if (minPrice !== null && !isNaN(minPrice) && minPrice >= 0) {
          searchParams.set('filter.v.price.gte', minPrice);
        }
        if (maxPrice !== null && !isNaN(maxPrice) && maxPrice >= 0) {
          // Ensure max is not less than min if both are set
          if (minPrice !== null && !isNaN(minPrice) && maxPrice < minPrice) {
            searchParams.set('filter.v.price.lte', minPrice); // Or handle as an error
          } else {
            searchParams.set('filter.v.price.lte', maxPrice);
          }
        }

        const paramsString = searchParams.toString();
        if (paramsString) {
          newUrl += '?' + paramsString;
        }

        // FOR DEBUGGING - REMOVE OR COMMENT OUT LATER
        // alert('Navigating to: ' + newUrl);

        window.location.href = newUrl;

        // Close the dropdown this button is in
        const filterDropdown = button.closest('.filter-dropdown');
        if (filterDropdown) {
          filterDropdown.classList.add('hidden');
          const filterItem = filterDropdown.closest('.filter-item');
          if (filterItem) {
            const chevron = filterItem.querySelector('.chevron-down');
            if (chevron) {
              chevron.classList.remove('rotate-180');
            }
          }
        }
      });
    });

    // Update data-url on tag checkboxes when their state changes
    const tagFilterCheckboxes = document.querySelectorAll(allTagFilterCheckboxSelector);
    tagFilterCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', function () {
        updateAllTagCheckboxDataUrls();
      });
    });

    // Mark active filter options and set initial data-urls/values on page load
    setupActiveFilters();

    function setupActiveFilters() {
      // Handle active tags from URL path (if current_tags is reliable for this)
      // or parse them from window.location.pathname if necessary.
      const activeTagsFromGlobal = window.current_tags || [];
      if (activeTagsFromGlobal && activeTagsFromGlobal.length > 0) {
        document.querySelectorAll(allTagFilterCheckboxSelector).forEach((checkbox) => {
          const value = checkbox.value;
          checkbox.checked = activeTagsFromGlobal.some((tag) => tag.toLowerCase() === value.toLowerCase());
        });
      }
      updateAllTagCheckboxDataUrls(); // Set initial data-urls for tag checkboxes

      // Handle active price filters from URL parameters
      const currentUrlParams = new URLSearchParams(window.location.search);
      const minPriceParam = currentUrlParams.get('filter.v.price.gte');
      const maxPriceParam = currentUrlParams.get('filter.v.price.lte');
      const minPriceInput = document.getElementById('filter-price-min');
      const maxPriceInput = document.getElementById('filter-price-max');

      if (minPriceInput && minPriceParam) {
        minPriceInput.value = minPriceParam;
      }
      if (maxPriceInput && maxPriceParam) {
        maxPriceInput.value = maxPriceParam;
      }

      // Show the active filters count section
      // (This might need adjustment if price is also to be counted as an "active filter" in the display)
      const activeFiltersSection = document.querySelector('.active-filters');
      if (activeFiltersSection && (activeTagsFromGlobal.length > 0 || minPriceParam || maxPriceParam)) {
        activeFiltersSection.classList.remove('hidden');
        // Potentially update the count in 'current_tags.size' display if price filters should be included.
      }
    }

    function updateAllTagCheckboxDataUrls() {
      const currentlyActiveGlobalTags = [];
      document.querySelectorAll(allActiveTagFilterCheckboxSelector).forEach((checkbox) => {
        currentlyActiveGlobalTags.push(checkbox.value);
      });

      document.querySelectorAll(allTagFilterCheckboxSelector).forEach((checkbox) => {
        updateSingleTagCheckboxDataUrl(checkbox, currentlyActiveGlobalTags);
      });
    }

    function updateSingleTagCheckboxDataUrl(checkbox, currentlyActiveGlobalTags) {
      const value = checkbox.value;
      let tagsForThisUrl = [...currentlyActiveGlobalTags];

      if (checkbox.checked) {
        tagsForThisUrl = tagsForThisUrl.filter((tag) => tag.toLowerCase() !== value.toLowerCase());
      } else {
        if (!tagsForThisUrl.some((tag) => tag.toLowerCase() === value.toLowerCase())) {
          tagsForThisUrl.push(value);
        }
      }

      let newDataBaseUrl = window.collection_url;
      if (tagsForThisUrl.length > 0) {
        newDataBaseUrl += '/' + tagsForThisUrl.join('+');
      }

      // Preserve current URL params (like sort_by AND existing price filters) for data-url consistency
      const currentParams = new URLSearchParams(window.location.search);
      const paramsString = currentParams.toString();
      if (paramsString) {
        newDataBaseUrl += '?' + paramsString;
      }
      checkbox.dataset.url = newDataBaseUrl;
    }
  });
</script>
