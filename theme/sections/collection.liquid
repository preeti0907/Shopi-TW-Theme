{% comment %}
  Simple Collection Page with top filters
  - Product grid
  - Top filters (Sort, Category, Color, Sizes)
  - Active filters display
{% endcomment %}

<div class="collection-container container mx-auto px-4 py-6">
  <!-- Collection title -->
  <div class="collection-page-header mb-8 pt-4 md:pt-6">
    <div class="flex flex-col md:flex-row gap-x-8 lg:gap-x-12 gap-y-6 items-start">
      <div
        class="w-full md:w-2/5 space-y-3 md:space-y-4 order-2 md:order-1 {% if text_align_block == 'center' %}text-center md:text-left{% else %}text-left{% endif %}"
      >
        {% if section_settings.show_breadcrumbs %}
          <div class="breadcrumb-container">{% render 'breadcrumbs' %}</div>
        {% endif %}

        <h1 class="text-2xl md:text-4xl font-serif font-medium">
          {{ collection.title }}
        </h1>

        {% if collection.description != blank and section_settings.description_position == 'header' %}
          <div
            class="collection-description text-base text-gray-700 {% if text_align_block == 'center' %}mx-auto md:mx-0 max-w-lg{% endif %}"
          >
            {{ collection.description }}
          </div>
        {% endif %}
      </div>
      <div
        class="w-full md:w-3/5 order-1 md:order-2 aspect-[4/3] md:aspect-[3/1] overflow-hidden"
      >
        {% if collection.image %}
          <img
            src="{{ collection.image | img_url: 'master' }}"
            alt="{{ collection.title | escape }}"
            class="w-full object-cover h-full rounded-xl lg:rounded-2xl shadow-sm"
            loading="lazy"
            width="{{ collection.image.width }}"
            height="{{ collection.image.height }}"
          >
        {% elsif section.settings.default_collection_image != blank and collection.image == blank %}
          <img
            src="{{ section.settings.default_collection_image | img_url: 'master' }}"
            alt="{{ collection.title | escape }}"
            class="w-full object-cover h-full  rounded-xl lg:rounded-2xl shadow-sm"
            loading="lazy"
            width="{{ section.settings.default_collection_image.width }}"
            height="{{ section.settings.default_collection_image.height }}"
          >
        {% else %}
          <div
            class="w-full object-cover h-full flex items-center justify-center bg-gray-100 rounded-xl lg:rounded-2xl shadow-sm"
          >
            {{ 'lifestyle-2' | placeholder_svg_tag: 'text-gray-400' }}
          </div>
        {% endif %}
      </div>
    </div>
  </div>

  {% comment %}
    {% render 'collection-filters' %}
  {% endcomment %}

  <!-- Product grid -->
  <div class="product-grid">
    {% paginate collection.products by 20 %}
      {% if collection.products.size > 0 %}
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {% for product in collection.products %}
            {% render 'product-card',
              product: product,
              show_secondary_image: true,
              show_add_to_cart: true,
              badge_type: 'percentage',
              title_lines: 2
            %}
          {% endfor %}
        </div>
      {% else %}
        <div class="empty-collection text-center py-12">
          <p class="text-lg mb-4">No products found in this collection.</p>
          <a href="/collections" class="inline-block px-6 py-3 bg-gray-100 hover:bg-gray-200 rounded-md transition">
            Browse all collections
          </a>
        </div>
      {% endif %}
    {% endpaginate %}
  </div>
</div>

{% schema %}
{
  "name": "Collection Page",
  "settings": [
    {
      "type": "header",
      "content": "Product Grid Settings"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show product vendor",
      "default": false
    },
    {
      "type": "image_picker",
      "id": "default_collection_image",
      "label": "Default Collection Image",
      "info": "This image will be used if a collection does not have its own featured image."
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "label": "Show secondary image on hover",
      "default": true
    }
  ]
}
{% endschema %}

<script>
  // Make collection information available to JavaScript
  window.collection_handle = "{{ collection.handle }}";
  window.collection_url = "{{ collection.url }}";
  window.current_tags = {{ current_tags | json }};
</script>

<style>
  /* Collection Filters Styles */
  .filters-top-row {
    border-color: #eeeeee;
  }

  /* Filter buttons */
  .filter-button {
    position: relative;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 150ms ease;
  }

  .filter-button:hover {
    background-color: #f9fafb;
  }

  /* Filter dropdowns */
  .filter-dropdown {
    min-width: 12rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    border-radius: 0.375rem;
    max-height: 20rem;
    overflow-y: auto;
  }

  /* Rotate chevron animation */
  .rotate-180 {
    transform: rotate(180deg);
  }

  .chevron-down {
    transition: transform 150ms ease;
  }

  /* Color swatches */
  .color-swatch {
    position: relative;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  /* Checked state for color swatches */
  .color-filter-checkbox:checked + .color-swatch::after {
    content: '';
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.2);
  }

  /* Black color needs white checkmark */
  .color-filter-checkbox:checked + .color-swatch.bg-black::after {
    background-color: white;
  }

  /* White color needs dark checkmark */
  .color-filter-checkbox:checked + .color-swatch.bg-white::after {
    background-color: #333;
  }

  /* Active filters */
  .active-filter-tag {
    background-color: #f3f4f6;
    transition: all 150ms ease;
  }

  .active-filter-tag:hover {
    background-color: #e5e7eb;
  }

  /* Line clamp for product titles */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const allTagFilterCheckboxSelector = '.category-filter-checkbox, .color-filter-checkbox, .size-filter-checkbox';
    const allActiveTagFilterCheckboxSelector =
      '.category-filter-checkbox:checked, .color-filter-checkbox:checked, .size-filter-checkbox:checked';

    // Toggle filter dropdowns
    const filterButtons = document.querySelectorAll('.filter-button');
    filterButtons.forEach((button) => {
      button.addEventListener('click', function (e) {
        e.stopPropagation();
        const filterItem = this.closest('.filter-item');
        const dropdown = filterItem.querySelector('.filter-dropdown');
        const chevron = this.querySelector('.chevron-down');

        document.querySelectorAll('.filter-dropdown').forEach((otherDropdown) => {
          if (otherDropdown !== dropdown && !otherDropdown.classList.contains('hidden')) {
            otherDropdown.classList.add('hidden');
            const otherChevron = otherDropdown.closest('.filter-item')?.querySelector('.chevron-down');
            if (otherChevron) {
              otherChevron.classList.remove('rotate-180');
            }
          }
        });
        dropdown.classList.toggle('hidden');
        if (chevron) {
          chevron.classList.toggle('rotate-180');
        }
      });
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', function (e) {
      if (!e.target.closest('.filter-item')) {
        document.querySelectorAll('.filter-dropdown').forEach((dropdown) => {
          dropdown.classList.add('hidden');
          const chevron = dropdown.closest('.filter-item')?.querySelector('.chevron-down');
          if (chevron) {
            chevron.classList.remove('rotate-180');
          }
        });
      }
    });

    // Handle Apply Filter buttons
    const applyFilterButtons = document.querySelectorAll('.apply-filters');
    applyFilterButtons.forEach((button) => {
      button.addEventListener('click', function () {
        // 1. Handle Tag-based filters (category, color, size) for URL path
        const allCheckedTagCheckboxes = document.querySelectorAll(allActiveTagFilterCheckboxSelector);
        let activeTagFilterValues = [];
        allCheckedTagCheckboxes.forEach((cb) => {
          activeTagFilterValues.push(cb.value);
        });
        activeTagFilterValues = [...new Set(activeTagFilterValues)]; // Deduplicate

        let newUrl = window.collection_url;
        if (activeTagFilterValues.length > 0) {
          newUrl += '/' + activeTagFilterValues.join('+');
        }

        // 2. Handle Price Range filter and other URL parameters
        const searchParams = new URLSearchParams(window.location.search); // Start with existing params like sort_by

        // Clear any existing price filter params to avoid conflicts if user clears them
        searchParams.delete('filter.v.price.gte');
        searchParams.delete('filter.v.price.lte');

        const minPriceInput = document.getElementById('filter-price-min');
        const maxPriceInput = document.getElementById('filter-price-max');
        const minPrice = minPriceInput ? parseFloat(minPriceInput.value) : null;
        const maxPrice = maxPriceInput ? parseFloat(maxPriceInput.value) : null;

        if (minPrice !== null && !isNaN(minPrice) && minPrice >= 0) {
          searchParams.set('filter.v.price.gte', minPrice);
        }
        if (maxPrice !== null && !isNaN(maxPrice) && maxPrice >= 0) {
          // Ensure max is not less than min if both are set
          if (minPrice !== null && !isNaN(minPrice) && maxPrice < minPrice) {
            searchParams.set('filter.v.price.lte', minPrice); // Or handle as an error
          } else {
            searchParams.set('filter.v.price.lte', maxPrice);
          }
        }

        const paramsString = searchParams.toString();
        if (paramsString) {
          newUrl += '?' + paramsString;
        }

        // FOR DEBUGGING - REMOVE OR COMMENT OUT LATER
        // alert('Navigating to: ' + newUrl);

        window.location.href = newUrl;

        // Close the dropdown this button is in
        const filterDropdown = button.closest('.filter-dropdown');
        if (filterDropdown) {
          filterDropdown.classList.add('hidden');
          const filterItem = filterDropdown.closest('.filter-item');
          if (filterItem) {
            const chevron = filterItem.querySelector('.chevron-down');
            if (chevron) {
              chevron.classList.remove('rotate-180');
            }
          }
        }
      });
    });

    // Update data-url on tag checkboxes when their state changes
    const tagFilterCheckboxes = document.querySelectorAll(allTagFilterCheckboxSelector);
    tagFilterCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', function () {
        updateAllTagCheckboxDataUrls();
      });
    });

    // Mark active filter options and set initial data-urls/values on page load
    setupActiveFilters();

    function setupActiveFilters() {
      // Handle active tags from URL path (if current_tags is reliable for this)
      // or parse them from window.location.pathname if necessary.
      const activeTagsFromGlobal = window.current_tags || [];
      if (activeTagsFromGlobal && activeTagsFromGlobal.length > 0) {
        document.querySelectorAll(allTagFilterCheckboxSelector).forEach((checkbox) => {
          const value = checkbox.value;
          checkbox.checked = activeTagsFromGlobal.some((tag) => tag.toLowerCase() === value.toLowerCase());
        });
      }
      updateAllTagCheckboxDataUrls(); // Set initial data-urls for tag checkboxes

      // Handle active price filters from URL parameters
      const currentUrlParams = new URLSearchParams(window.location.search);
      const minPriceParam = currentUrlParams.get('filter.v.price.gte');
      const maxPriceParam = currentUrlParams.get('filter.v.price.lte');
      const minPriceInput = document.getElementById('filter-price-min');
      const maxPriceInput = document.getElementById('filter-price-max');

      if (minPriceInput && minPriceParam) {
        minPriceInput.value = minPriceParam;
      }
      if (maxPriceInput && maxPriceParam) {
        maxPriceInput.value = maxPriceParam;
      }

      // Show the active filters count section
      // (This might need adjustment if price is also to be counted as an "active filter" in the display)
      const activeFiltersSection = document.querySelector('.active-filters');
      if (activeFiltersSection && (activeTagsFromGlobal.length > 0 || minPriceParam || maxPriceParam)) {
        activeFiltersSection.classList.remove('hidden');
        // Potentially update the count in 'current_tags.size' display if price filters should be included.
      }
    }

    function updateAllTagCheckboxDataUrls() {
      const currentlyActiveGlobalTags = [];
      document.querySelectorAll(allActiveTagFilterCheckboxSelector).forEach((checkbox) => {
        currentlyActiveGlobalTags.push(checkbox.value);
      });

      document.querySelectorAll(allTagFilterCheckboxSelector).forEach((checkbox) => {
        updateSingleTagCheckboxDataUrl(checkbox, currentlyActiveGlobalTags);
      });
    }

    function updateSingleTagCheckboxDataUrl(checkbox, currentlyActiveGlobalTags) {
      const value = checkbox.value;
      let tagsForThisUrl = [...currentlyActiveGlobalTags];

      if (checkbox.checked) {
        tagsForThisUrl = tagsForThisUrl.filter((tag) => tag.toLowerCase() !== value.toLowerCase());
      } else {
        if (!tagsForThisUrl.some((tag) => tag.toLowerCase() === value.toLowerCase())) {
          tagsForThisUrl.push(value);
        }
      }

      let newDataBaseUrl = window.collection_url;
      if (tagsForThisUrl.length > 0) {
        newDataBaseUrl += '/' + tagsForThisUrl.join('+');
      }

      // Preserve current URL params (like sort_by AND existing price filters) for data-url consistency
      const currentParams = new URLSearchParams(window.location.search);
      const paramsString = currentParams.toString();
      if (paramsString) {
        newDataBaseUrl += '?' + paramsString;
      }
      checkbox.dataset.url = newDataBaseUrl;
    }
  });
</script>
